
stepper_foc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007004  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007198  08007198  00017198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b0  080073b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080073b0  080073b0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073b0  080073b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080073b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  08007428  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08007428  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f816  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ff  00000000  00000000  0002f8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00031ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00032a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002225d  00000000  00000000  00033890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010125  00000000  00000000  00055aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d712c  00000000  00000000  00065c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013cd3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a0  00000000  00000000  0013cd90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800717c 	.word	0x0800717c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800717c 	.word	0x0800717c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	0000      	movs	r0, r0
	...

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b0a3      	sub	sp, #140	; 0x8c
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  // generate sin and cos tables (although periodic, generate them for all the NR electrical revolutions since the is enough memory available)
  float* sin_table = malloc(ENCODER_STEPS * sizeof(float));
 8000b76:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000b7a:	f005 f99f 	bl	8005ebc <malloc>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	65fb      	str	r3, [r7, #92]	; 0x5c
  float* cos_table = malloc(ENCODER_STEPS * sizeof(float));
 8000b82:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000b86:	f005 f999 	bl	8005ebc <malloc>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < ENCODER_STEPS; i++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000b94:	e04a      	b.n	8000c2c <main+0xbc>
	  float arg = i * 2 * NR * M_PI / ENCODER_STEPS;
 8000b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b9a:	2264      	movs	r2, #100	; 0x64
 8000b9c:	fb02 f303 	mul.w	r3, r2, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fc67 	bl	8000474 <__aeabi_i2d>
 8000ba6:	a3bb      	add	r3, pc, #748	; (adr r3, 8000e94 <main+0x324>)
 8000ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bac:	f7ff fccc 	bl	8000548 <__aeabi_dmul>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	4ba8      	ldr	r3, [pc, #672]	; (8000e60 <main+0x2f0>)
 8000bbe:	f7ff fded 	bl	800079c <__aeabi_ddiv>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f7ff ff7f 	bl	8000acc <__aeabi_d2f>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	613b      	str	r3, [r7, #16]
	  sin_table[i] = (float)sin(arg);
 8000bd2:	6938      	ldr	r0, [r7, #16]
 8000bd4:	f7ff fc60 	bl	8000498 <__aeabi_f2d>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	ec43 2b10 	vmov	d0, r2, r3
 8000be0:	f005 fa82 	bl	80060e8 <sin>
 8000be4:	ec51 0b10 	vmov	r0, r1, d0
 8000be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000bf0:	18d4      	adds	r4, r2, r3
 8000bf2:	f7ff ff6b 	bl	8000acc <__aeabi_d2f>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	6023      	str	r3, [r4, #0]
	  cos_table[i] = (float)cos(arg);
 8000bfa:	6938      	ldr	r0, [r7, #16]
 8000bfc:	f7ff fc4c 	bl	8000498 <__aeabi_f2d>
 8000c00:	4602      	mov	r2, r0
 8000c02:	460b      	mov	r3, r1
 8000c04:	ec43 2b10 	vmov	d0, r2, r3
 8000c08:	f005 fa1a 	bl	8006040 <cos>
 8000c0c:	ec51 0b10 	vmov	r0, r1, d0
 8000c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c18:	18d4      	adds	r4, r2, r3
 8000c1a:	f7ff ff57 	bl	8000acc <__aeabi_d2f>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6023      	str	r3, [r4, #0]
  for (int i = 0; i < ENCODER_STEPS; i++) {
 8000c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c26:	3301      	adds	r3, #1
 8000c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c30:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c34:	dbaf      	blt.n	8000b96 <main+0x26>
  }

  // calculate the controller parameters
  // current controller C(z)=V*(z-exp(-R/L * Ts))/(z-1) results in closed-loop pole at 1-V/R*(1-exp(-R/L * Ts)), which must be within the unit circle
  const float E = exp(-R/L * TS);
 8000c36:	4b8b      	ldr	r3, [pc, #556]	; (8000e64 <main+0x2f4>)
 8000c38:	657b      	str	r3, [r7, #84]	; 0x54
  const float V = (6.0/I_MAX) < (R/(1-exp(-R/L*TS))) ? (6.0/I_MAX) : (R/(1-exp(-R/L*TS)));	/* controller gain such that for a step input i_d_ref (i_q_ref) with height I_MAX, the voltage v_d (v_q) does not exceed 6 V
 8000c3a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8000c3e:	653b      	str	r3, [r7, #80]	; 0x50
 	 and such that the closed-loop pole is within the interval [0,1) */

  // calculate the conversion factors for converting the ADC readings to SI units (volts or amps)
  const float ADC_SUPPLY_VOLTAGE_CONVERSION_FACTOR = ADC_REF_VOLTAGE * SUPPLY_VOLTAGE_DIVIDER_RATIO / (float)ADC_STEPS;
 8000c40:	4b89      	ldr	r3, [pc, #548]	; (8000e68 <main+0x2f8>)
 8000c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float ADC_CURRENT_CONVERSION_FACTOR = ADC_REF_VOLTAGE / CURRENT_SENSOR_SENSITIVITY / (float)ADC_STEPS;
 8000c44:	4b89      	ldr	r3, [pc, #548]	; (8000e6c <main+0x2fc>)
 8000c46:	64bb      	str	r3, [r7, #72]	; 0x48
  const float ADC_REF_INPUTS_CONVERSION_FACTOR = 2 * I_MAX / (float)ADC_STEPS;
 8000c48:	f04f 5369 	mov.w	r3, #977272832	; 0x3a400000
 8000c4c:	647b      	str	r3, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f001 f840 	bl	8001cd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 fa59 	bl	8001108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 fccb 	bl	80015f0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000c5a:	f000 fb7d 	bl	8001358 <MX_TIM1_Init>
  MX_DMA_Init();
 8000c5e:	f000 fca9 	bl	80015b4 <MX_DMA_Init>
  MX_TIM16_Init();
 8000c62:	f000 fc81 	bl	8001568 <MX_TIM16_Init>
  MX_ADC1_Init();
 8000c66:	f000 fab1 	bl	80011cc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c6a:	f000 fc29 	bl	80014c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  TIM1->CCR1 = 0;
 8000c6e:	4b80      	ldr	r3, [pc, #512]	; (8000e70 <main+0x300>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 0;
 8000c74:	4b7e      	ldr	r3, [pc, #504]	; (8000e70 <main+0x300>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8000c7a:	4b7d      	ldr	r3, [pc, #500]	; (8000e70 <main+0x300>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 8000c80:	4b7b      	ldr	r3, [pc, #492]	; (8000e70 <main+0x300>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);		// phase B in_A
 8000c86:	2100      	movs	r1, #0
 8000c88:	487a      	ldr	r0, [pc, #488]	; (8000e74 <main+0x304>)
 8000c8a:	f004 f87b 	bl	8004d84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);		// phase A in_A
 8000c8e:	2104      	movs	r1, #4
 8000c90:	4878      	ldr	r0, [pc, #480]	; (8000e74 <main+0x304>)
 8000c92:	f004 f877 	bl	8004d84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);		// phase A in_B
 8000c96:	2108      	movs	r1, #8
 8000c98:	4876      	ldr	r0, [pc, #472]	; (8000e74 <main+0x304>)
 8000c9a:	f004 f873 	bl	8004d84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);		// phase B in_B
 8000c9e:	210c      	movs	r1, #12
 8000ca0:	4874      	ldr	r0, [pc, #464]	; (8000e74 <main+0x304>)
 8000ca2:	f004 f86f 	bl	8004d84 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ca6:	213c      	movs	r1, #60	; 0x3c
 8000ca8:	4873      	ldr	r0, [pc, #460]	; (8000e78 <main+0x308>)
 8000caa:	f004 f9ef 	bl	800508c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim16);
 8000cae:	4873      	ldr	r0, [pc, #460]	; (8000e7c <main+0x30c>)
 8000cb0:	f003 ffbc 	bl	8004c2c <HAL_TIM_Base_Start_IT>
  	  	  	  	  	  	  	//			 adc_buf[3]: current sensor phase A ref
    	  	  	  	  	  	//			 adc_buf[4]: current sensor phase A out
  	  	  	  	  	  	    //			 adc_buf[5]: i_d ref
      	  	  	  	  	  	//			 adc_buf[6]: i_q ref

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, 7);
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4871      	ldr	r0, [pc, #452]	; (8000e80 <main+0x310>)
 8000cbc:	f001 fbb2 	bl	8002424 <HAL_ADC_Start_DMA>
  int cnt;
  float sin_value;
  float cos_value;

  float e_i_d, e_i_q;
  float e_i_d_prev = 0;
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	673b      	str	r3, [r7, #112]	; 0x70
  float e_i_q_prev = 0;
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	66fb      	str	r3, [r7, #108]	; 0x6c
  float v_d_prev = 0;
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	66bb      	str	r3, [r7, #104]	; 0x68
  float v_q_prev = 0;
 8000cd2:	f04f 0300 	mov.w	r3, #0
 8000cd6:	667b      	str	r3, [r7, #100]	; 0x64

  int limit_hit_flag = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	663b      	str	r3, [r7, #96]	; 0x60

  HAL_Delay(100);
 8000cdc:	2064      	movs	r0, #100	; 0x64
 8000cde:	f001 f86d 	bl	8001dbc <HAL_Delay>
  // turn on green LED to indicate ready state and wait for button to be pressed before continuing
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);			// turn on green LED
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2108      	movs	r1, #8
 8000ce6:	4867      	ldr	r0, [pc, #412]	; (8000e84 <main+0x314>)
 8000ce8:	f002 fdc4 	bl	8003874 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET);	// wait for button being pressed
 8000cec:	bf00      	nop
 8000cee:	2120      	movs	r1, #32
 8000cf0:	4864      	ldr	r0, [pc, #400]	; (8000e84 <main+0x314>)
 8000cf2:	f002 fda7 	bl	8003844 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d0f8      	beq.n	8000cee <main+0x17e>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);			// turn off green LED
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2108      	movs	r1, #8
 8000d00:	4860      	ldr	r0, [pc, #384]	; (8000e84 <main+0x314>)
 8000d02:	f002 fdb7 	bl	8003874 <HAL_GPIO_WritePin>

  /* Hold the current in phase A at approximately I_MAX for ALIGNMENT_TIME milliseconds. The position in which the rotor settles defines the
   * zero position in which the d-axis and the a-axis are aligned. */
  v_supply = (float)adc_buf[0] * ADC_SUPPLY_VOLTAGE_CONVERSION_FACTOR;
 8000d06:	883b      	ldrh	r3, [r7, #0]
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d10:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d18:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  //set_output_a(R * I_MAX, v_supply);
  set_output_a(R * I_MAX, v_supply);
 8000d1c:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 8000d20:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8000e88 <main+0x318>
 8000d24:	f000 fcba 	bl	800169c <set_output_a>
  HAL_Delay(ALIGNMENT_TIME);
 8000d28:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d2c:	f001 f846 	bl	8001dbc <HAL_Delay>
  TIM2->CNT = 0;
 8000d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
  set_output_a(0.0, 0.0);
 8000d38:	eddf 0a54 	vldr	s1, [pc, #336]	; 8000e8c <main+0x31c>
 8000d3c:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8000e8c <main+0x31c>
 8000d40:	f000 fcac 	bl	800169c <set_output_a>
  HAL_Delay(100);
 8000d44:	2064      	movs	r0, #100	; 0x64
 8000d46:	f001 f839 	bl	8001dbc <HAL_Delay>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);			// turn on green LED
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	484d      	ldr	r0, [pc, #308]	; (8000e84 <main+0x314>)
 8000d50:	f002 fd90 	bl	8003874 <HAL_GPIO_WritePin>
  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_SET);	// wait for button being pressed
 8000d54:	bf00      	nop
 8000d56:	2120      	movs	r1, #32
 8000d58:	484a      	ldr	r0, [pc, #296]	; (8000e84 <main+0x314>)
 8000d5a:	f002 fd73 	bl	8003844 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d0f8      	beq.n	8000d56 <main+0x1e6>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);			// turn off green LED
 8000d64:	2200      	movs	r2, #0
 8000d66:	2108      	movs	r1, #8
 8000d68:	4846      	ldr	r0, [pc, #280]	; (8000e84 <main+0x314>)
 8000d6a:	f002 fd83 	bl	8003874 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (triggered) {
 8000d6e:	4b48      	ldr	r3, [pc, #288]	; (8000e90 <main+0x320>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0fa      	beq.n	8000d6e <main+0x1fe>
		triggered = 0;
 8000d78:	4b45      	ldr	r3, [pc, #276]	; (8000e90 <main+0x320>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);		// allows for measuring the execution time of one cycle of the control algorithm via a oscilloscope
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2108      	movs	r1, #8
 8000d82:	4840      	ldr	r0, [pc, #256]	; (8000e84 <main+0x314>)
 8000d84:	f002 fd76 	bl	8003874 <HAL_GPIO_WritePin>

		// read the phase currents i_a and i_b
		i_a = (float)(adc_buf[4] - adc_buf[3]) * ADC_CURRENT_CONVERSION_FACTOR;
 8000d88:	893b      	ldrh	r3, [r7, #8]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	88fb      	ldrh	r3, [r7, #6]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	ee07 3a90 	vmov	s15, r3
 8000d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d98:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		i_b = (float)(adc_buf[2] - adc_buf[1]) * ADC_CURRENT_CONVERSION_FACTOR;
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	461a      	mov	r2, r3
 8000da8:	887b      	ldrh	r3, [r7, #2]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dbc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

        // shut down if currents exceed the over current limit
        if (i_a > OVERCURRENT_LIMIT || i_b > OVERCURRENT_LIMIT || -i_a > OVERCURRENT_LIMIT || -i_b > OVERCURRENT_LIMIT) {
 8000dc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000dc2:	f7ff fb69 	bl	8000498 <__aeabi_f2d>
 8000dc6:	a324      	add	r3, pc, #144	; (adr r3, 8000e58 <main+0x2e8>)
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	f7ff fe4c 	bl	8000a68 <__aeabi_dcmpgt>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d12c      	bne.n	8000e30 <main+0x2c0>
 8000dd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000dd8:	f7ff fb5e 	bl	8000498 <__aeabi_f2d>
 8000ddc:	a31e      	add	r3, pc, #120	; (adr r3, 8000e58 <main+0x2e8>)
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	f7ff fe41 	bl	8000a68 <__aeabi_dcmpgt>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d121      	bne.n	8000e30 <main+0x2c0>
 8000dec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000df0:	eef1 7a67 	vneg.f32	s15, s15
 8000df4:	ee17 3a90 	vmov	r3, s15
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fb4d 	bl	8000498 <__aeabi_f2d>
 8000dfe:	a316      	add	r3, pc, #88	; (adr r3, 8000e58 <main+0x2e8>)
 8000e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e04:	f7ff fe30 	bl	8000a68 <__aeabi_dcmpgt>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d110      	bne.n	8000e30 <main+0x2c0>
 8000e0e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000e12:	eef1 7a67 	vneg.f32	s15, s15
 8000e16:	ee17 3a90 	vmov	r3, s15
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb3c 	bl	8000498 <__aeabi_f2d>
 8000e20:	a30d      	add	r3, pc, #52	; (adr r3, 8000e58 <main+0x2e8>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff fe1f 	bl	8000a68 <__aeabi_dcmpgt>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d035      	beq.n	8000e9c <main+0x32c>
          set_output_a(0.0, 0.0);
 8000e30:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000e8c <main+0x31c>
 8000e34:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000e8c <main+0x31c>
 8000e38:	f000 fc30 	bl	800169c <set_output_a>
          set_output_b(0.0, 0.0);
 8000e3c:	eddf 0a13 	vldr	s1, [pc, #76]	; 8000e8c <main+0x31c>
 8000e40:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8000e8c <main+0x31c>
 8000e44:	f000 fc7c 	bl	8001740 <set_output_b>
          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// turn on the red LED
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <main+0x314>)
 8000e4e:	f002 fd11 	bl	8003874 <HAL_GPIO_WritePin>
          while(1);   // wait for reset
 8000e52:	e7fe      	b.n	8000e52 <main+0x2e2>
 8000e54:	f3af 8000 	nop.w
 8000e58:	66666666 	.word	0x66666666
 8000e5c:	3ffe6666 	.word	0x3ffe6666
 8000e60:	40af4000 	.word	0x40af4000
 8000e64:	3f5d42e1 	.word	0x3f5d42e1
 8000e68:	3c113333 	.word	0x3c113333
 8000e6c:	3b28e7ec 	.word	0x3b28e7ec
 8000e70:	40012c00 	.word	0x40012c00
 8000e74:	20000138 	.word	0x20000138
 8000e78:	20000184 	.word	0x20000184
 8000e7c:	200001d0 	.word	0x200001d0
 8000e80:	2000008c 	.word	0x2000008c
 8000e84:	48000400 	.word	0x48000400
 8000e88:	3f866666 	.word	0x3f866666
 8000e8c:	00000000 	.word	0x00000000
 8000e90:	2000021c 	.word	0x2000021c
 8000e94:	54442d18 	.word	0x54442d18
 8000e98:	400921fb 	.word	0x400921fb
        }

		// calculate the currents i_d and i_q
		cnt = TIM2->CNT;	// read the encoder angle
 8000e9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34

		sin_value = sin_table[cnt];
 8000ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000eaa:	4413      	add	r3, r2
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
		cos_value = cos_table[cnt];
 8000eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000eb6:	4413      	add	r3, r2
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c

		i_d = cos_value * i_a + sin_value * i_b;
 8000ebc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000ec0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ec8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000ecc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		i_q = -sin_value * i_a + cos_value * i_b;
 8000edc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000ee0:	eeb1 7a67 	vneg.f32	s14, s15
 8000ee4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eec:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000ef0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// read the set points i_d_ref and i_q_ref for the currents i_d and i_q
		//i_d_ref = (float)(adc_buf[5] - (ADC_STEPS >> 1)) * ADC_REF_INPUTS_CONVERSION_FACTOR;
		i_d_ref = 0;
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
		i_q_ref = (float)(adc_buf[6] - (ADC_STEPS >> 1)) * ADC_REF_INPUTS_CONVERSION_FACTOR;
 8000f06:	89bb      	ldrh	r3, [r7, #12]
 8000f08:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f14:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1c:	edc7 7a07 	vstr	s15, [r7, #28]

		// calculate v_d and v_q via the current controllers difference equations
		e_i_d = i_d_ref - i_d;
 8000f20:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2c:	edc7 7a06 	vstr	s15, [r7, #24]
		e_i_q = i_q_ref - i_q;
 8000f30:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3c:	edc7 7a05 	vstr	s15, [r7, #20]

		v_d = V * (e_i_d - E * e_i_d_prev) + v_d_prev;
 8000f40:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000f44:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8000f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f54:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f5c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8000f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f64:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		v_q = V * (e_i_q - E * e_i_q_prev) + v_q_prev;
 8000f68:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000f6c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f74:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f7c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f84:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

	    e_i_d_prev = e_i_d;
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	673b      	str	r3, [r7, #112]	; 0x70
	    e_i_q_prev = e_i_q;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	66fb      	str	r3, [r7, #108]	; 0x6c

		// calculate the phase voltages v_a and v_b
		v_a = cos_value * v_d - sin_value * v_q;
 8000f98:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000f9c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000fa8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		v_b = sin_value * v_d + cos_value * v_q;
 8000fb8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000fbc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8000fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8000fc8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

		// check whether the calculated voltages are within the supply voltage (i.e. whether they are realizable)
		v_supply = (float)adc_buf[0] * ADC_SUPPLY_VOLTAGE_CONVERSION_FACTOR;	// read the supply voltage
 8000fd8:	883b      	ldrh	r3, [r7, #0]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		if (v_a > v_supply) {
 8000fee:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8000ff2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffe:	dd05      	ble.n	800100c <main+0x49c>
			limit_hit_flag = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	663b      	str	r3, [r7, #96]	; 0x60
			v_a = v_supply;
 8001004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001006:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800100a:	e012      	b.n	8001032 <main+0x4c2>
		} else if (v_a < -v_supply) {
 800100c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001010:	eef1 7a67 	vneg.f32	s15, s15
 8001014:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d507      	bpl.n	8001032 <main+0x4c2>
			limit_hit_flag = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	663b      	str	r3, [r7, #96]	; 0x60
		    v_a = -v_supply;
 8001026:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800102a:	eef1 7a67 	vneg.f32	s15, s15
 800102e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		}

		if (v_b > v_supply) {
 8001032:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001036:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800103a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001042:	dd04      	ble.n	800104e <main+0x4de>
			limit_hit_flag = 1;
 8001044:	2301      	movs	r3, #1
 8001046:	663b      	str	r3, [r7, #96]	; 0x60
		    v_b = v_supply;
 8001048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800104a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800104c:	e012      	b.n	8001074 <main+0x504>
		} else if (v_b < -v_supply) {
 800104e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001052:	eef1 7a67 	vneg.f32	s15, s15
 8001056:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800105a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	d507      	bpl.n	8001074 <main+0x504>
			limit_hit_flag = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	663b      	str	r3, [r7, #96]	; 0x60
		    v_b = -v_supply;
 8001068:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800106c:	eef1 7a67 	vneg.f32	s15, s15
 8001070:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		}

		// apply the calculated phase voltages v_a and v_b to the motor phases
		set_output_a(v_a, v_supply);
 8001074:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 8001078:	ed97 0a20 	vldr	s0, [r7, #128]	; 0x80
 800107c:	f000 fb0e 	bl	800169c <set_output_a>
		set_output_b(v_b, v_supply);
 8001080:	edd7 0a10 	vldr	s1, [r7, #64]	; 0x40
 8001084:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8001088:	f000 fb5a 	bl	8001740 <set_output_b>

		if (limit_hit_flag) {
 800108c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800108e:	2b00      	cmp	r3, #0
 8001090:	d029      	beq.n	80010e6 <main+0x576>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);		// turn on the red LED
 8001092:	2201      	movs	r2, #1
 8001094:	2110      	movs	r1, #16
 8001096:	481b      	ldr	r0, [pc, #108]	; (8001104 <main+0x594>)
 8001098:	f002 fbec 	bl	8003874 <HAL_GPIO_WritePin>
			// calculate the actually realized v_d and v_q voltages (anti windup)
			v_d = cos_value * v_a + sin_value * v_b;
 800109c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80010a0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80010a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80010ac:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80010b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			v_q = -sin_value * v_a + cos_value * v_b;
 80010bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80010c0:	eeb1 7a67 	vneg.f32	s14, s15
 80010c4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80010c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010cc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80010d0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80010d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010dc:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			limit_hit_flag = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	663b      	str	r3, [r7, #96]	; 0x60
 80010e4:	e004      	b.n	80010f0 <main+0x580>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);	// turn off the red LED
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <main+0x594>)
 80010ec:	f002 fbc2 	bl	8003874 <HAL_GPIO_WritePin>
		}

		v_d_prev = v_d;
 80010f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010f2:	66bb      	str	r3, [r7, #104]	; 0x68
		v_q_prev = v_q;
 80010f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010f6:	667b      	str	r3, [r7, #100]	; 0x64

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);	// allows for measuring the execution time of one cycle of the control algorithm via a oscilloscope
 80010f8:	2200      	movs	r2, #0
 80010fa:	2108      	movs	r1, #8
 80010fc:	4801      	ldr	r0, [pc, #4]	; (8001104 <main+0x594>)
 80010fe:	f002 fbb9 	bl	8003874 <HAL_GPIO_WritePin>
	if (triggered) {
 8001102:	e634      	b.n	8000d6e <main+0x1fe>
 8001104:	48000400 	.word	0x48000400

08001108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b096      	sub	sp, #88	; 0x58
 800110c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	2244      	movs	r2, #68	; 0x44
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f004 fed8 	bl	8005ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800112a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800112e:	f002 fbd7 	bl	80038e0 <HAL_PWREx_ControlVoltageScaling>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001138:	f000 fb6a 	bl	8001810 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800113c:	f002 fbb2 	bl	80038a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001140:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <SystemClock_Config+0xc0>)
 8001142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001146:	4a20      	ldr	r2, [pc, #128]	; (80011c8 <SystemClock_Config+0xc0>)
 8001148:	f023 0318 	bic.w	r3, r3, #24
 800114c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001150:	2314      	movs	r3, #20
 8001152:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001158:	2301      	movs	r3, #1
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001160:	2360      	movs	r3, #96	; 0x60
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001164:	2302      	movs	r3, #2
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001168:	2301      	movs	r3, #1
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800116c:	2301      	movs	r3, #1
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 35;
 8001170:	2323      	movs	r3, #35	; 0x23
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001174:	2307      	movs	r3, #7
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fc01 	bl	800398c <HAL_RCC_OscConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001190:	f000 fb3e 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001194:	230f      	movs	r3, #15
 8001196:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001198:	2303      	movs	r3, #3
 800119a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	2104      	movs	r1, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f801 	bl	80041b4 <HAL_RCC_ClockConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011b8:	f000 fb2a 	bl	8001810 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011bc:	f003 fbdc 	bl	8004978 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011c0:	bf00      	nop
 80011c2:	3758      	adds	r7, #88	; 0x58
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000

080011cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011e2:	4b54      	ldr	r3, [pc, #336]	; (8001334 <MX_ADC1_Init+0x168>)
 80011e4:	4a54      	ldr	r2, [pc, #336]	; (8001338 <MX_ADC1_Init+0x16c>)
 80011e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011e8:	4b52      	ldr	r3, [pc, #328]	; (8001334 <MX_ADC1_Init+0x168>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ee:	4b51      	ldr	r3, [pc, #324]	; (8001334 <MX_ADC1_Init+0x168>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f4:	4b4f      	ldr	r3, [pc, #316]	; (8001334 <MX_ADC1_Init+0x168>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011fa:	4b4e      	ldr	r3, [pc, #312]	; (8001334 <MX_ADC1_Init+0x168>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001200:	4b4c      	ldr	r3, [pc, #304]	; (8001334 <MX_ADC1_Init+0x168>)
 8001202:	2208      	movs	r2, #8
 8001204:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <MX_ADC1_Init+0x168>)
 8001208:	2200      	movs	r2, #0
 800120a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800120c:	4b49      	ldr	r3, [pc, #292]	; (8001334 <MX_ADC1_Init+0x168>)
 800120e:	2201      	movs	r2, #1
 8001210:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 7;
 8001212:	4b48      	ldr	r3, [pc, #288]	; (8001334 <MX_ADC1_Init+0x168>)
 8001214:	2207      	movs	r2, #7
 8001216:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001218:	4b46      	ldr	r3, [pc, #280]	; (8001334 <MX_ADC1_Init+0x168>)
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001220:	4b44      	ldr	r3, [pc, #272]	; (8001334 <MX_ADC1_Init+0x168>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001226:	4b43      	ldr	r3, [pc, #268]	; (8001334 <MX_ADC1_Init+0x168>)
 8001228:	2200      	movs	r2, #0
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800122c:	4b41      	ldr	r3, [pc, #260]	; (8001334 <MX_ADC1_Init+0x168>)
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001234:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <MX_ADC1_Init+0x168>)
 8001236:	2200      	movs	r2, #0
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800123a:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <MX_ADC1_Init+0x168>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001242:	483c      	ldr	r0, [pc, #240]	; (8001334 <MX_ADC1_Init+0x168>)
 8001244:	f000 ffa6 	bl	8002194 <HAL_ADC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800124e:	f000 fadf 	bl	8001810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001252:	4b3a      	ldr	r3, [pc, #232]	; (800133c <MX_ADC1_Init+0x170>)
 8001254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001256:	2306      	movs	r3, #6
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 800125a:	2303      	movs	r3, #3
 800125c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800125e:	237f      	movs	r3, #127	; 0x7f
 8001260:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001262:	2304      	movs	r3, #4
 8001264:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	4619      	mov	r1, r3
 800126e:	4831      	ldr	r0, [pc, #196]	; (8001334 <MX_ADC1_Init+0x168>)
 8001270:	f001 f97a 	bl	8002568 <HAL_ADC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800127a:	f000 fac9 	bl	8001810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <MX_ADC1_Init+0x174>)
 8001280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001282:	230c      	movs	r3, #12
 8001284:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	482a      	ldr	r0, [pc, #168]	; (8001334 <MX_ADC1_Init+0x168>)
 800128c:	f001 f96c 	bl	8002568 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001296:	f000 fabb 	bl	8001810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_ADC1_Init+0x178>)
 800129c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800129e:	2312      	movs	r3, #18
 80012a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4823      	ldr	r0, [pc, #140]	; (8001334 <MX_ADC1_Init+0x168>)
 80012a8:	f001 f95e 	bl	8002568 <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80012b2:	f000 faad 	bl	8001810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_ADC1_Init+0x17c>)
 80012b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012ba:	2318      	movs	r3, #24
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	481c      	ldr	r0, [pc, #112]	; (8001334 <MX_ADC1_Init+0x168>)
 80012c4:	f001 f950 	bl	8002568 <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80012ce:	f000 fa9f 	bl	8001810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_ADC1_Init+0x180>)
 80012d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4814      	ldr	r0, [pc, #80]	; (8001334 <MX_ADC1_Init+0x168>)
 80012e2:	f001 f941 	bl	8002568 <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 80012ec:	f000 fa90 	bl	8001810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_ADC1_Init+0x184>)
 80012f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012f4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_ADC1_Init+0x168>)
 8001300:	f001 f932 	bl	8002568 <HAL_ADC_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC1_Init+0x142>
  {
    Error_Handler();
 800130a:	f000 fa81 	bl	8001810 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_ADC1_Init+0x188>)
 8001310:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001312:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_ADC1_Init+0x168>)
 800131e:	f001 f923 	bl	8002568 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8001328:	f000 fa72 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	2000008c 	.word	0x2000008c
 8001338:	50040000 	.word	0x50040000
 800133c:	1d500080 	.word	0x1d500080
 8001340:	21800100 	.word	0x21800100
 8001344:	25b00200 	.word	0x25b00200
 8001348:	2e300800 	.word	0x2e300800
 800134c:	32601000 	.word	0x32601000
 8001350:	3ef08000 	.word	0x3ef08000
 8001354:	43210000 	.word	0x43210000

08001358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b096      	sub	sp, #88	; 0x58
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	222c      	movs	r2, #44	; 0x2c
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f004 fda1 	bl	8005ecc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138a:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <MX_TIM1_Init+0x160>)
 800138c:	4a4b      	ldr	r2, [pc, #300]	; (80014bc <MX_TIM1_Init+0x164>)
 800138e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001390:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <MX_TIM1_Init+0x160>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <MX_TIM1_Init+0x160>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1400-1;
 800139c:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <MX_TIM1_Init+0x160>)
 800139e:	f240 5277 	movw	r2, #1399	; 0x577
 80013a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <MX_TIM1_Init+0x160>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013aa:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <MX_TIM1_Init+0x160>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b0:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <MX_TIM1_Init+0x160>)
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013b6:	4840      	ldr	r0, [pc, #256]	; (80014b8 <MX_TIM1_Init+0x160>)
 80013b8:	f003 fc8c 	bl	8004cd4 <HAL_TIM_PWM_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f000 fa25 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c6:	2300      	movs	r3, #0
 80013c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013d6:	4619      	mov	r1, r3
 80013d8:	4837      	ldr	r0, [pc, #220]	; (80014b8 <MX_TIM1_Init+0x160>)
 80013da:	f004 fc49 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013e4:	f000 fa14 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e8:	2360      	movs	r3, #96	; 0x60
 80013ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f0:	2300      	movs	r3, #0
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80013f8:	2304      	movs	r3, #4
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001408:	2200      	movs	r2, #0
 800140a:	4619      	mov	r1, r3
 800140c:	482a      	ldr	r0, [pc, #168]	; (80014b8 <MX_TIM1_Init+0x160>)
 800140e:	f003 ffeb 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001418:	f000 f9fa 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800141c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001420:	2204      	movs	r2, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4824      	ldr	r0, [pc, #144]	; (80014b8 <MX_TIM1_Init+0x160>)
 8001426:	f003 ffdf 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001430:	f000 f9ee 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001434:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001438:	2208      	movs	r2, #8
 800143a:	4619      	mov	r1, r3
 800143c:	481e      	ldr	r0, [pc, #120]	; (80014b8 <MX_TIM1_Init+0x160>)
 800143e:	f003 ffd3 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001448:	f000 f9e2 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800144c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001450:	220c      	movs	r2, #12
 8001452:	4619      	mov	r1, r3
 8001454:	4818      	ldr	r0, [pc, #96]	; (80014b8 <MX_TIM1_Init+0x160>)
 8001456:	f003 ffc7 	bl	80053e8 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001460:	f000 f9d6 	bl	8001810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	4619      	mov	r1, r3
 8001498:	4807      	ldr	r0, [pc, #28]	; (80014b8 <MX_TIM1_Init+0x160>)
 800149a:	f004 fc4f 	bl	8005d3c <HAL_TIMEx_ConfigBreakDeadTime>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80014a4:	f000 f9b4 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <MX_TIM1_Init+0x160>)
 80014aa:	f000 fb1d 	bl	8001ae8 <HAL_TIM_MspPostInit>

}
 80014ae:	bf00      	nop
 80014b0:	3758      	adds	r7, #88	; 0x58
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000138 	.word	0x20000138
 80014bc:	40012c00 	.word	0x40012c00

080014c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014c6:	f107 030c 	add.w	r3, r7, #12
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f004 fcfc 	bl	8005ecc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014e6:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014f4:	f640 729f 	movw	r2, #3999	; 0xf9f
 80014f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_TIM2_Init+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_TIM2_Init+0xa4>)
 8001502:	2280      	movs	r2, #128	; 0x80
 8001504:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001506:	2303      	movs	r3, #3
 8001508:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800151e:	2301      	movs	r3, #1
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <MX_TIM2_Init+0xa4>)
 8001532:	f003 fd05 	bl	8004f40 <HAL_TIM_Encoder_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800153c:	f000 f968 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001540:	2300      	movs	r3, #0
 8001542:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_TIM2_Init+0xa4>)
 800154e:	f004 fb8f 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001558:	f000 f95a 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3730      	adds	r7, #48	; 0x30
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000184 	.word	0x20000184

08001568 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <MX_TIM16_Init+0x44>)
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <MX_TIM16_Init+0x48>)
 8001570:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 70-1;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <MX_TIM16_Init+0x44>)
 8001574:	2245      	movs	r2, #69	; 0x45
 8001576:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_TIM16_Init+0x44>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 250-1;
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <MX_TIM16_Init+0x44>)
 8001580:	22f9      	movs	r2, #249	; 0xf9
 8001582:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_TIM16_Init+0x44>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <MX_TIM16_Init+0x44>)
 800158c:	2200      	movs	r2, #0
 800158e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_TIM16_Init+0x44>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_TIM16_Init+0x44>)
 8001598:	f003 faf0 	bl	8004b7c <HAL_TIM_Base_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80015a2:	f000 f935 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200001d0 	.word	0x200001d0
 80015b0:	40014400 	.word	0x40014400

080015b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <MX_DMA_Init+0x38>)
 80015bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <MX_DMA_Init+0x38>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6493      	str	r3, [r2, #72]	; 0x48
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_DMA_Init+0x38>)
 80015c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	200b      	movs	r0, #11
 80015d8:	f001 fd9b 	bl	8003112 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015dc:	200b      	movs	r0, #11
 80015de:	f001 fdb4 	bl	800314a <HAL_NVIC_EnableIRQ>

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000

080015f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <MX_GPIO_Init+0xa4>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	4a22      	ldr	r2, [pc, #136]	; (8001694 <MX_GPIO_Init+0xa4>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <MX_GPIO_Init+0xa4>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <MX_GPIO_Init+0xa4>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <MX_GPIO_Init+0xa4>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <MX_GPIO_Init+0xa4>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_GPIO_Init+0xa4>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <MX_GPIO_Init+0xa4>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_GPIO_Init+0xa4>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|GPIO_PIN_4, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2118      	movs	r1, #24
 8001652:	4811      	ldr	r0, [pc, #68]	; (8001698 <MX_GPIO_Init+0xa8>)
 8001654:	f002 f90e 	bl	8003874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin PB4 */
  GPIO_InitStruct.Pin = LD3_Pin|GPIO_PIN_4;
 8001658:	2318      	movs	r3, #24
 800165a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4619      	mov	r1, r3
 800166e:	480a      	ldr	r0, [pc, #40]	; (8001698 <MX_GPIO_Init+0xa8>)
 8001670:	f001 ff7e 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001674:	2320      	movs	r3, #32
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167c:	2301      	movs	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4619      	mov	r1, r3
 8001686:	4804      	ldr	r0, [pc, #16]	; (8001698 <MX_GPIO_Init+0xa8>)
 8001688:	f001 ff72 	bl	8003570 <HAL_GPIO_Init>

}
 800168c:	bf00      	nop
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40021000 	.word	0x40021000
 8001698:	48000400 	.word	0x48000400

0800169c <set_output_a>:

/* USER CODE BEGIN 4 */

void set_output_a(float v_a, float v_supply) {
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80016a6:	edc7 0a00 	vstr	s1, [r7]
    if (v_supply < MINIMAL_SUPPLY_VOLTAGE) {   // no output when supply voltage is too low
 80016aa:	edd7 7a00 	vldr	s15, [r7]
 80016ae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80016b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	d506      	bpl.n	80016ca <set_output_a+0x2e>
        TIM1->CCR2 = 0;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <set_output_a+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	639a      	str	r2, [r3, #56]	; 0x38
        TIM1->CCR3 = 0;
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <set_output_a+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	63da      	str	r2, [r3, #60]	; 0x3c
        return;
 80016c8:	e02f      	b.n	800172a <set_output_a+0x8e>
    }
	if (v_a > 0) {
 80016ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d6:	dd14      	ble.n	8001702 <set_output_a+0x66>
		TIM1->CCR3 = 0;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <set_output_a+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM1->CCR2 = (uint32_t)(PWM_STEPS * v_a/v_supply) + PWM_STEPS_OFFSET;
 80016de:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001738 <set_output_a+0x9c>
 80016e6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016ea:	ed97 7a00 	vldr	s14, [r7]
 80016ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016f6:	ee17 3a90 	vmov	r3, s15
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <set_output_a+0x98>)
 80016fc:	3355      	adds	r3, #85	; 0x55
 80016fe:	6393      	str	r3, [r2, #56]	; 0x38
 8001700:	e013      	b.n	800172a <set_output_a+0x8e>
	} else {
		TIM1->CCR2 = 0;
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <set_output_a+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = (uint32_t)(-PWM_STEPS * v_a/v_supply) + PWM_STEPS_OFFSET;
 8001708:	edd7 7a01 	vldr	s15, [r7, #4]
 800170c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800173c <set_output_a+0xa0>
 8001710:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001714:	ed97 7a00 	vldr	s14, [r7]
 8001718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001720:	ee17 3a90 	vmov	r3, s15
 8001724:	4a03      	ldr	r2, [pc, #12]	; (8001734 <set_output_a+0x98>)
 8001726:	3355      	adds	r3, #85	; 0x55
 8001728:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
}
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40012c00 	.word	0x40012c00
 8001738:	44af0000 	.word	0x44af0000
 800173c:	c4af0000 	.word	0xc4af0000

08001740 <set_output_b>:

void set_output_b(float v_b, float v_supply) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a01 	vstr	s0, [r7, #4]
 800174a:	edc7 0a00 	vstr	s1, [r7]
    if (v_supply < MINIMAL_SUPPLY_VOLTAGE) {   // no output when supply voltage is too low
 800174e:	edd7 7a00 	vldr	s15, [r7]
 8001752:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175e:	d506      	bpl.n	800176e <set_output_b+0x2e>
        TIM1->CCR1 = 0;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <set_output_b+0x98>)
 8001762:	2200      	movs	r2, #0
 8001764:	635a      	str	r2, [r3, #52]	; 0x34
        TIM1->CCR4 = 0;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <set_output_b+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	641a      	str	r2, [r3, #64]	; 0x40
        return;
 800176c:	e02f      	b.n	80017ce <set_output_b+0x8e>
    }
	if (v_b > 0) {
 800176e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	dd14      	ble.n	80017a6 <set_output_b+0x66>
		TIM1->CCR4 = 0;
 800177c:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <set_output_b+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
		TIM1->CCR1 = (uint32_t)(PWM_STEPS * v_b/v_supply) + PWM_STEPS_OFFSET;
 8001782:	edd7 7a01 	vldr	s15, [r7, #4]
 8001786:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80017dc <set_output_b+0x9c>
 800178a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800178e:	ed97 7a00 	vldr	s14, [r7]
 8001792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179a:	ee17 3a90 	vmov	r3, s15
 800179e:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <set_output_b+0x98>)
 80017a0:	3355      	adds	r3, #85	; 0x55
 80017a2:	6353      	str	r3, [r2, #52]	; 0x34
 80017a4:	e013      	b.n	80017ce <set_output_b+0x8e>
	} else {
		TIM1->CCR1 = 0;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <set_output_b+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR4 = (uint32_t)(-PWM_STEPS * v_b/v_supply) + PWM_STEPS_OFFSET;
 80017ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80017e0 <set_output_b+0xa0>
 80017b4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017b8:	ed97 7a00 	vldr	s14, [r7]
 80017bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c4:	ee17 3a90 	vmov	r3, s15
 80017c8:	4a03      	ldr	r2, [pc, #12]	; (80017d8 <set_output_b+0x98>)
 80017ca:	3355      	adds	r3, #85	; 0x55
 80017cc:	6413      	str	r3, [r2, #64]	; 0x40
	}
}
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40012c00 	.word	0x40012c00
 80017dc:	44af0000 	.word	0x44af0000
 80017e0:	c4af0000 	.word	0xc4af0000

080017e4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d102      	bne.n	80017fa <HAL_TIM_PeriodElapsedCallback+0x16>
		triggered = 1;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
	}
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200001d0 	.word	0x200001d0
 800180c:	2000021c 	.word	0x2000021c

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	e7fe      	b.n	8001818 <Error_Handler+0x8>
	...

0800181c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_MspInit+0x44>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_MspInit+0x44>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6613      	str	r3, [r2, #96]	; 0x60
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_MspInit+0x44>)
 8001830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x44>)
 800183c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x44>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6593      	str	r3, [r2, #88]	; 0x58
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x44>)
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000

08001864 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0a0      	sub	sp, #128	; 0x80
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	2254      	movs	r2, #84	; 0x54
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f004 fb21 	bl	8005ecc <memset>
  if(hadc->Instance==ADC1)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a47      	ldr	r2, [pc, #284]	; (80019ac <HAL_ADC_MspInit+0x148>)
 8001890:	4293      	cmp	r3, r2
 8001892:	f040 8087 	bne.w	80019a4 <HAL_ADC_MspInit+0x140>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800189a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800189c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018a0:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80018a2:	2301      	movs	r3, #1
 80018a4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80018aa:	2310      	movs	r3, #16
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018ae:	2307      	movs	r3, #7
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c0:	f107 0318 	add.w	r3, r7, #24
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fe61 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80018d0:	f7ff ff9e 	bl	8001810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018d4:	4b36      	ldr	r3, [pc, #216]	; (80019b0 <HAL_ADC_MspInit+0x14c>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	4a35      	ldr	r2, [pc, #212]	; (80019b0 <HAL_ADC_MspInit+0x14c>)
 80018da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <HAL_ADC_MspInit+0x14c>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <HAL_ADC_MspInit+0x14c>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <HAL_ADC_MspInit+0x14c>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_ADC_MspInit+0x14c>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_ADC_MspInit+0x14c>)
 8001906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001908:	4a29      	ldr	r2, [pc, #164]	; (80019b0 <HAL_ADC_MspInit+0x14c>)
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_ADC_MspInit+0x14c>)
 8001912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
 800191c:	23dc      	movs	r3, #220	; 0xdc
 800191e:	66fb      	str	r3, [r7, #108]	; 0x6c
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001920:	230b      	movs	r3, #11
 8001922:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001932:	f001 fe1d 	bl	8003570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001936:	2303      	movs	r3, #3
 8001938:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800193a:	230b      	movs	r3, #11
 800193c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001946:	4619      	mov	r1, r3
 8001948:	481a      	ldr	r0, [pc, #104]	; (80019b4 <HAL_ADC_MspInit+0x150>)
 800194a:	f001 fe11 	bl	8003570 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 8001950:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <HAL_ADC_MspInit+0x158>)
 8001952:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 8001956:	2200      	movs	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 800196e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001972:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 8001976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 800197e:	2220      	movs	r2, #32
 8001980:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001982:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 800198a:	f001 fbf9 	bl	8003180 <HAL_DMA_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001994:	f7ff ff3c 	bl	8001810 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 800199c:	64da      	str	r2, [r3, #76]	; 0x4c
 800199e:	4a06      	ldr	r2, [pc, #24]	; (80019b8 <HAL_ADC_MspInit+0x154>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019a4:	bf00      	nop
 80019a6:	3780      	adds	r7, #128	; 0x80
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	50040000 	.word	0x50040000
 80019b0:	40021000 	.word	0x40021000
 80019b4:	48000400 	.word	0x48000400
 80019b8:	200000f0 	.word	0x200000f0
 80019bc:	40020008 	.word	0x40020008

080019c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <HAL_TIM_PWM_MspInit+0x44>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d113      	bne.n	80019fa <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_TIM_PWM_MspInit+0x48>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	4a0c      	ldr	r2, [pc, #48]	; (8001a08 <HAL_TIM_PWM_MspInit+0x48>)
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019dc:	6613      	str	r3, [r2, #96]	; 0x60
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_TIM_PWM_MspInit+0x48>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	2019      	movs	r0, #25
 80019f0:	f001 fb8f 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019f4:	2019      	movs	r0, #25
 80019f6:	f001 fba8 	bl	800314a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40012c00 	.word	0x40012c00
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2c:	d130      	bne.n	8001a90 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001a5e:	2322      	movs	r3, #34	; 0x22
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7c:	f001 fd78 	bl	8003570 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	201c      	movs	r0, #28
 8001a86:	f001 fb44 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a8a:	201c      	movs	r0, #28
 8001a8c:	f001 fb5d 	bl	800314a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_TIM_Base_MspInit+0x44>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d113      	bne.n	8001ad6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_TIM_Base_MspInit+0x48>)
 8001ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_TIM_Base_MspInit+0x48>)
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_TIM_Base_MspInit+0x48>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2019      	movs	r0, #25
 8001acc:	f001 fb21 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ad0:	2019      	movs	r0, #25
 8001ad2:	f001 fb3a 	bl	800314a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40014400 	.word	0x40014400
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <HAL_TIM_MspPostInit+0x68>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d11d      	bne.n	8001b46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_TIM_MspPostInit+0x6c>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_TIM_MspPostInit+0x6c>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_TIM_MspPostInit+0x6c>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001b22:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f001 fd15 	bl	8003570 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40021000 	.word	0x40021000

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 f8ea 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <DMA1_Channel1_IRQHandler+0x10>)
 8001bb2:	f001 fbfd 	bl	80033b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200000f0 	.word	0x200000f0

08001bc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001bc6:	f003 faef 	bl	80051a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001bca:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001bcc:	f003 faec 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000138 	.word	0x20000138
 8001bd8:	200001d0 	.word	0x200001d0

08001bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <TIM2_IRQHandler+0x10>)
 8001be2:	f003 fae1 	bl	80051a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000184 	.word	0x20000184

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f004 f922 	bl	8005e68 <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20010000 	.word	0x20010000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	20000220 	.word	0x20000220
 8001c58:	20000238 	.word	0x20000238

08001c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c84:	f7ff ffea 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	; (8001cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	; (8001cc4 <LoopForever+0xe>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	; (8001cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	; (8001ccc <LoopForever+0x16>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f004 f8e1 	bl	8005e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb2:	f7fe ff5d 	bl	8000b70 <main>

08001cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb6:	e7fe      	b.n	8001cb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001cc4:	080073b8 	.word	0x080073b8
  ldr r2, =_sbss
 8001cc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ccc:	20000238 	.word	0x20000238

08001cd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC1_IRQHandler>

08001cd2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f001 fa0d 	bl	80030fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f80e 	bl	8001d04 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	e001      	b.n	8001cf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cf4:	f7ff fd92 	bl	800181c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_InitTick+0x6c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d023      	beq.n	8001d60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_InitTick+0x70>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_InitTick+0x6c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f001 fa19 	bl	8003166 <HAL_SYSTICK_Config>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10f      	bne.n	8001d5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b0f      	cmp	r3, #15
 8001d3e:	d809      	bhi.n	8001d54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d40:	2200      	movs	r2, #0
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d48:	f001 f9e3 	bl	8003112 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4c:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_InitTick+0x74>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e007      	b.n	8001d64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e004      	b.n	8001d64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e001      	b.n	8001d64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_IncTick+0x20>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_IncTick+0x24>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_IncTick+0x24>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000224 	.word	0x20000224

08001da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return uwTick;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_GetTick+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000224 	.word	0x20000224

08001dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff ffee 	bl	8001da4 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd4:	d005      	beq.n	8001de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_Delay+0x44>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de2:	bf00      	nop
 8001de4:	f7ff ffde 	bl	8001da4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d8f7      	bhi.n	8001de4 <HAL_Delay+0x28>
  {
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000008 	.word	0x20000008

08001e04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3360      	adds	r3, #96	; 0x60
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <LL_ADC_SetOffset+0x44>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ea4:	bf00      	nop
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	03fff000 	.word	0x03fff000

08001eb4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3360      	adds	r3, #96	; 0x60
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3360      	adds	r3, #96	; 0x60
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3330      	adds	r3, #48	; 0x30
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	4413      	add	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	211f      	movs	r1, #31
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	401a      	ands	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	f003 011f 	and.w	r1, r3, #31
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	431a      	orrs	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3314      	adds	r3, #20
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	0e5b      	lsrs	r3, r3, #25
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	4413      	add	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	0d1b      	lsrs	r3, r3, #20
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	2107      	movs	r1, #7
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	401a      	ands	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	0d1b      	lsrs	r3, r3, #20
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fde:	bf00      	nop
 8001fe0:	371c      	adds	r7, #28
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	43db      	mvns	r3, r3
 8002006:	401a      	ands	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f003 0318 	and.w	r3, r3, #24
 800200e:	4908      	ldr	r1, [pc, #32]	; (8002030 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002010:	40d9      	lsrs	r1, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	400b      	ands	r3, r1
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	431a      	orrs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	0007ffff 	.word	0x0007ffff

08002034 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6093      	str	r3, [r2, #8]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800206c:	d101      	bne.n	8002072 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002090:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002094:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020bc:	d101      	bne.n	80020c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e4:	f043 0201 	orr.w	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <LL_ADC_IsEnabled+0x18>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <LL_ADC_IsEnabled+0x1a>
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800212e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b04      	cmp	r3, #4
 8002158:	d101      	bne.n	800215e <LL_ADC_REG_IsConversionOngoing+0x18>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b08      	cmp	r3, #8
 800217e:	d101      	bne.n	8002184 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e12c      	b.n	8002408 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d109      	bne.n	80021d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fb51 	bl	8001864 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff3f 	bl	8002058 <LL_ADC_IsDeepPowerDownEnabled>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff25 	bl	8002034 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff5a 	bl	80020a8 <LL_ADC_IsInternalRegulatorEnabled>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d115      	bne.n	8002226 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff3e 	bl	8002080 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002204:	4b82      	ldr	r3, [pc, #520]	; (8002410 <HAL_ADC_Init+0x27c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	099b      	lsrs	r3, r3, #6
 800220a:	4a82      	ldr	r2, [pc, #520]	; (8002414 <HAL_ADC_Init+0x280>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	3301      	adds	r3, #1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002218:	e002      	b.n	8002220 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	3b01      	subs	r3, #1
 800221e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f9      	bne.n	800221a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff3c 	bl	80020a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10d      	bne.n	8002252 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff75 	bl	8002146 <LL_ADC_REG_IsConversionOngoing>
 800225c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 80c5 	bne.w	80023f6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 80c1 	bne.w	80023f6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800227c:	f043 0202 	orr.w	r2, r3, #2
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff35 	bl	80020f8 <LL_ADC_IsEnabled>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002294:	4860      	ldr	r0, [pc, #384]	; (8002418 <HAL_ADC_Init+0x284>)
 8002296:	f7ff ff2f 	bl	80020f8 <LL_ADC_IsEnabled>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4619      	mov	r1, r3
 80022a6:	485d      	ldr	r0, [pc, #372]	; (800241c <HAL_ADC_Init+0x288>)
 80022a8:	f7ff fdac 	bl	8001e04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e5b      	ldrb	r3, [r3, #25]
 80022b0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022b6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022bc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022c2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d106      	bne.n	80022e8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	3b01      	subs	r3, #1
 80022e0:	045b      	lsls	r3, r3, #17
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <HAL_ADC_Init+0x28c>)
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	430b      	orrs	r3, r1
 8002316:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff12 	bl	8002146 <LL_ADC_REG_IsConversionOngoing>
 8002322:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff1f 	bl	800216c <LL_ADC_INJ_IsConversionOngoing>
 800232e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d13d      	bne.n	80023b2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d13a      	bne.n	80023b2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002340:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002348:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002358:	f023 0302 	bic.w	r3, r3, #2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	69b9      	ldr	r1, [r7, #24]
 8002362:	430b      	orrs	r3, r1
 8002364:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800236c:	2b01      	cmp	r3, #1
 800236e:	d118      	bne.n	80023a2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800237a:	f023 0304 	bic.w	r3, r3, #4
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002386:	4311      	orrs	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002392:	430a      	orrs	r2, r1
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	611a      	str	r2, [r3, #16]
 80023a0:	e007      	b.n	80023b2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10c      	bne.n	80023d4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f023 010f 	bic.w	r1, r3, #15
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	1e5a      	subs	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
 80023d2:	e007      	b.n	80023e4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 020f 	bic.w	r2, r2, #15
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f023 0303 	bic.w	r3, r3, #3
 80023ec:	f043 0201 	orr.w	r2, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
 80023f4:	e007      	b.n	8002406 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002406:	7ffb      	ldrb	r3, [r7, #31]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3720      	adds	r7, #32
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20000000 	.word	0x20000000
 8002414:	053e2d63 	.word	0x053e2d63
 8002418:	50040000 	.word	0x50040000
 800241c:	50040300 	.word	0x50040300
 8002420:	fff0c007 	.word	0xfff0c007

08002424 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fe86 	bl	8002146 <LL_ADC_REG_IsConversionOngoing>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d167      	bne.n	8002510 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_Start_DMA+0x2a>
 800244a:	2302      	movs	r3, #2
 800244c:	e063      	b.n	8002516 <HAL_ADC_Start_DMA+0xf2>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fc66 	bl	8002d28 <ADC_Enable>
 800245c:	4603      	mov	r3, r0
 800245e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d14f      	bne.n	8002506 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	f023 0206 	bic.w	r2, r3, #6
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	659a      	str	r2, [r3, #88]	; 0x58
 8002492:	e002      	b.n	800249a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	4a20      	ldr	r2, [pc, #128]	; (8002520 <HAL_ADC_Start_DMA+0xfc>)
 80024a0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_ADC_Start_DMA+0x100>)
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_ADC_Start_DMA+0x104>)
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	221c      	movs	r2, #28
 80024b8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0210 	orr.w	r2, r2, #16
 80024d0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f042 0201 	orr.w	r2, r2, #1
 80024e0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3340      	adds	r3, #64	; 0x40
 80024ec:	4619      	mov	r1, r3
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f000 fefd 	bl	80032f0 <HAL_DMA_Start_IT>
 80024f6:	4603      	mov	r3, r0
 80024f8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fe0d 	bl	800211e <LL_ADC_REG_StartConversion>
 8002504:	e006      	b.n	8002514 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800250e:	e001      	b.n	8002514 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002510:	2302      	movs	r3, #2
 8002512:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002514:	7dfb      	ldrb	r3, [r7, #23]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	08002e35 	.word	0x08002e35
 8002524:	08002f0d 	.word	0x08002f0d
 8002528:	08002f29 	.word	0x08002f29

0800252c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b0b6      	sub	sp, #216	; 0xd8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x22>
 8002586:	2302      	movs	r3, #2
 8002588:	e3b9      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x796>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff fdd5 	bl	8002146 <LL_ADC_REG_IsConversionOngoing>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f040 839e 	bne.w	8002ce0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d824      	bhi.n	80025f6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	3b02      	subs	r3, #2
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d81b      	bhi.n	80025ee <HAL_ADC_ConfigChannel+0x86>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <HAL_ADC_ConfigChannel+0x54>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	080025cd 	.word	0x080025cd
 80025c0:	080025d5 	.word	0x080025d5
 80025c4:	080025dd 	.word	0x080025dd
 80025c8:	080025e5 	.word	0x080025e5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	220c      	movs	r2, #12
 80025d0:	605a      	str	r2, [r3, #4]
          break;
 80025d2:	e011      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2212      	movs	r2, #18
 80025d8:	605a      	str	r2, [r3, #4]
          break;
 80025da:	e00d      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2218      	movs	r2, #24
 80025e0:	605a      	str	r2, [r3, #4]
          break;
 80025e2:	e009      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ea:	605a      	str	r2, [r3, #4]
          break;
 80025ec:	e004      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2206      	movs	r2, #6
 80025f2:	605a      	str	r2, [r3, #4]
          break;
 80025f4:	e000      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80025f6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	f7ff fc99 	bl	8001f3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fd99 	bl	8002146 <LL_ADC_REG_IsConversionOngoing>
 8002614:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fda5 	bl	800216c <LL_ADC_INJ_IsConversionOngoing>
 8002622:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002626:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 81a6 	bne.w	800297c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002630:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 81a1 	bne.w	800297c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	461a      	mov	r2, r3
 8002648:	f7ff fca4 	bl	8001f94 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	08db      	lsrs	r3, r3, #3
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d00a      	beq.n	8002684 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6919      	ldr	r1, [r3, #16]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800267e:	f7ff fbf5 	bl	8001e6c <LL_ADC_SetOffset>
 8002682:	e17b      	b.n	800297c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fc12 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 8002690:	4603      	mov	r3, r0
 8002692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10a      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x148>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fc07 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 80026a6:	4603      	mov	r3, r0
 80026a8:	0e9b      	lsrs	r3, r3, #26
 80026aa:	f003 021f 	and.w	r2, r3, #31
 80026ae:	e01e      	b.n	80026ee <HAL_ADC_ConfigChannel+0x186>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fbfc 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80026de:	2320      	movs	r3, #32
 80026e0:	e004      	b.n	80026ec <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80026e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d105      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x19e>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	0e9b      	lsrs	r3, r3, #26
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	e018      	b.n	8002738 <HAL_ADC_ConfigChannel+0x1d0>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800271a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800271e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002722:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800272a:	2320      	movs	r3, #32
 800272c:	e004      	b.n	8002738 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800272e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002738:	429a      	cmp	r2, r3
 800273a:	d106      	bne.n	800274a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fbcb 	bl	8001ee0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2101      	movs	r1, #1
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fbaf 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x20e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2101      	movs	r1, #1
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fba4 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 800276c:	4603      	mov	r3, r0
 800276e:	0e9b      	lsrs	r3, r3, #26
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	e01e      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x24c>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2101      	movs	r1, #1
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fb99 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002798:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800279c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80027a4:	2320      	movs	r3, #32
 80027a6:	e004      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80027a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x264>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	e018      	b.n	80027fe <HAL_ADC_ConfigChannel+0x296>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80027e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80027e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e004      	b.n	80027fe <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80027f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027fe:	429a      	cmp	r2, r3
 8002800:	d106      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	2101      	movs	r1, #1
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fb68 	bl	8001ee0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2102      	movs	r1, #2
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fb4c 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <HAL_ADC_ConfigChannel+0x2d4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2102      	movs	r1, #2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fb41 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	0e9b      	lsrs	r3, r3, #26
 8002836:	f003 021f 	and.w	r2, r3, #31
 800283a:	e01e      	b.n	800287a <HAL_ADC_ConfigChannel+0x312>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2102      	movs	r1, #2
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fb36 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 8002848:	4603      	mov	r3, r0
 800284a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800285a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800285e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002862:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e004      	b.n	8002878 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800286e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002872:	fab3 f383 	clz	r3, r3
 8002876:	b2db      	uxtb	r3, r3
 8002878:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d105      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x32a>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	e016      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x358>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e004      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80028b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d106      	bne.n	80028d2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	2102      	movs	r1, #2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fb07 	bl	8001ee0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2103      	movs	r1, #3
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff faeb 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x396>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2103      	movs	r1, #3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fae0 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	0e9b      	lsrs	r3, r3, #26
 80028f8:	f003 021f 	and.w	r2, r3, #31
 80028fc:	e017      	b.n	800292e <HAL_ADC_ConfigChannel+0x3c6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2103      	movs	r1, #3
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fad5 	bl	8001eb4 <LL_ADC_GetOffsetChannel>
 800290a:	4603      	mov	r3, r0
 800290c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002918:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800291a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002920:	2320      	movs	r3, #32
 8002922:	e003      	b.n	800292c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x3de>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	e011      	b.n	800296a <HAL_ADC_ConfigChannel+0x402>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002956:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e003      	b.n	800296a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002964:	fab3 f383 	clz	r3, r3
 8002968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800296a:	429a      	cmp	r2, r3
 800296c:	d106      	bne.n	800297c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2200      	movs	r2, #0
 8002974:	2103      	movs	r1, #3
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fab2 	bl	8001ee0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fbb9 	bl	80020f8 <LL_ADC_IsEnabled>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 813f 	bne.w	8002c0c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6819      	ldr	r1, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	461a      	mov	r2, r3
 800299c:	f7ff fb26 	bl	8001fec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a8e      	ldr	r2, [pc, #568]	; (8002be0 <HAL_ADC_ConfigChannel+0x678>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	f040 8130 	bne.w	8002c0c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x46c>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0e9b      	lsrs	r3, r3, #26
 80029c2:	3301      	adds	r3, #1
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	bf94      	ite	ls
 80029cc:	2301      	movls	r3, #1
 80029ce:	2300      	movhi	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e019      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x4a0>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80029e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80029e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80029ec:	2320      	movs	r3, #32
 80029ee:	e003      	b.n	80029f8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80029f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029f2:	fab3 f383 	clz	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2b09      	cmp	r3, #9
 8002a00:	bf94      	ite	ls
 8002a02:	2301      	movls	r3, #1
 8002a04:	2300      	movhi	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d079      	beq.n	8002b00 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d107      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x4c0>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	069b      	lsls	r3, r3, #26
 8002a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a26:	e015      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x4ec>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a38:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	069b      	lsls	r3, r3, #26
 8002a50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x50c>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	e017      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x53c>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e003      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f003 031f 	and.w	r3, r3, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	ea42 0103 	orr.w	r1, r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x562>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4413      	add	r3, r2
 8002ac6:	051b      	lsls	r3, r3, #20
 8002ac8:	e018      	b.n	8002afc <HAL_ADC_ConfigChannel+0x594>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	e003      	b.n	8002aee <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002afc:	430b      	orrs	r3, r1
 8002afe:	e080      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x5b4>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0e9b      	lsrs	r3, r3, #26
 8002b12:	3301      	adds	r3, #1
 8002b14:	069b      	lsls	r3, r3, #26
 8002b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1a:	e015      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x5e0>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e003      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	069b      	lsls	r3, r3, #26
 8002b44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d109      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x600>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	e017      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x630>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	61fb      	str	r3, [r7, #28]
  return result;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002b80:	2320      	movs	r3, #32
 8002b82:	e003      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	ea42 0103 	orr.w	r1, r2, r3
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x65c>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0e9b      	lsrs	r3, r3, #26
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b1e      	subs	r3, #30
 8002bbc:	051b      	lsls	r3, r3, #20
 8002bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	e01d      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x698>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	613b      	str	r3, [r7, #16]
  return result;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d103      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e005      	b.n	8002bec <HAL_ADC_ConfigChannel+0x684>
 8002be0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f003 021f 	and.w	r2, r3, #31
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3b1e      	subs	r3, #30
 8002bfa:	051b      	lsls	r3, r3, #20
 8002bfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c00:	430b      	orrs	r3, r1
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	6892      	ldr	r2, [r2, #8]
 8002c06:	4619      	mov	r1, r3
 8002c08:	f7ff f9c4 	bl	8001f94 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b3d      	ldr	r3, [pc, #244]	; (8002d08 <HAL_ADC_ConfigChannel+0x7a0>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d06c      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c18:	483c      	ldr	r0, [pc, #240]	; (8002d0c <HAL_ADC_ConfigChannel+0x7a4>)
 8002c1a:	f7ff f919 	bl	8001e50 <LL_ADC_GetCommonPathInternalCh>
 8002c1e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3a      	ldr	r2, [pc, #232]	; (8002d10 <HAL_ADC_ConfigChannel+0x7a8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d127      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d121      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a35      	ldr	r2, [pc, #212]	; (8002d14 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d157      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	482f      	ldr	r0, [pc, #188]	; (8002d0c <HAL_ADC_ConfigChannel+0x7a4>)
 8002c4e:	f7ff f8ec 	bl	8001e2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c52:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_ADC_ConfigChannel+0x7b0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	099b      	lsrs	r3, r3, #6
 8002c58:	4a30      	ldr	r2, [pc, #192]	; (8002d1c <HAL_ADC_ConfigChannel+0x7b4>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	4613      	mov	r3, r2
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	4413      	add	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c6c:	e002      	b.n	8002c74 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f9      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c7a:	e03a      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d113      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x746>
 8002c86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d12a      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4819      	ldr	r0, [pc, #100]	; (8002d0c <HAL_ADC_ConfigChannel+0x7a4>)
 8002ca8:	f7ff f8bf 	bl	8001e2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cac:	e021      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_ADC_ConfigChannel+0x7bc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d11c      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d116      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <HAL_ADC_ConfigChannel+0x7ac>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d111      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480c      	ldr	r0, [pc, #48]	; (8002d0c <HAL_ADC_ConfigChannel+0x7a4>)
 8002cda:	f7ff f8a6 	bl	8001e2a <LL_ADC_SetCommonPathInternalCh>
 8002cde:	e008      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cfa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	37d8      	adds	r7, #216	; 0xd8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	80080000 	.word	0x80080000
 8002d0c:	50040300 	.word	0x50040300
 8002d10:	c7520000 	.word	0xc7520000
 8002d14:	50040000 	.word	0x50040000
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	053e2d63 	.word	0x053e2d63
 8002d20:	cb840000 	.word	0xcb840000
 8002d24:	80000001 	.word	0x80000001

08002d28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff f9dd 	bl	80020f8 <LL_ADC_IsEnabled>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d169      	bne.n	8002e18 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <ADC_Enable+0xfc>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	f043 0210 	orr.w	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e055      	b.n	8002e1a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff f9ac 	bl	80020d0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002d78:	482b      	ldr	r0, [pc, #172]	; (8002e28 <ADC_Enable+0x100>)
 8002d7a:	f7ff f869 	bl	8001e50 <LL_ADC_GetCommonPathInternalCh>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d88:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <ADC_Enable+0x104>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	099b      	lsrs	r3, r3, #6
 8002d8e:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <ADC_Enable+0x108>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	099b      	lsrs	r3, r3, #6
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002da2:	e002      	b.n	8002daa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f9      	bne.n	8002da4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fff8 	bl	8001da4 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002db6:	e028      	b.n	8002e0a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff f99b 	bl	80020f8 <LL_ADC_IsEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d104      	bne.n	8002dd2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f97f 	bl	80020d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dd2:	f7fe ffe7 	bl	8001da4 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d914      	bls.n	8002e0a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d00d      	beq.n	8002e0a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e007      	b.n	8002e1a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d1cf      	bne.n	8002db8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	8000003f 	.word	0x8000003f
 8002e28:	50040300 	.word	0x50040300
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	053e2d63 	.word	0x053e2d63

08002e34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d14b      	bne.n	8002ee6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d021      	beq.n	8002eac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff f852 	bl	8001f16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d032      	beq.n	8002ede <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d12b      	bne.n	8002ede <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11f      	bne.n	8002ede <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
 8002eaa:	e018      	b.n	8002ede <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d111      	bne.n	8002ede <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fb24 	bl	800252c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ee4:	e00e      	b.n	8002f04 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff fb2e 	bl	8002554 <HAL_ADC_ErrorCallback>
}
 8002ef8:	e004      	b.n	8002f04 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fb10 	bl	8002540 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	f043 0204 	orr.w	r2, r3, #4
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7ff fb00 	bl	8002554 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f54:	bf00      	nop
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8e:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	60d3      	str	r3, [r2, #12]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa8:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <__NVIC_GetPriorityGrouping+0x18>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	f003 0307 	and.w	r3, r3, #7
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db0b      	blt.n	8002fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	4907      	ldr	r1, [pc, #28]	; (8002ff8 <__NVIC_EnableIRQ+0x38>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	e000e100 	.word	0xe000e100

08002ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	6039      	str	r1, [r7, #0]
 8003006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	2b00      	cmp	r3, #0
 800300e:	db0a      	blt.n	8003026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	490c      	ldr	r1, [pc, #48]	; (8003048 <__NVIC_SetPriority+0x4c>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	440b      	add	r3, r1
 8003020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003024:	e00a      	b.n	800303c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4908      	ldr	r1, [pc, #32]	; (800304c <__NVIC_SetPriority+0x50>)
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	3b04      	subs	r3, #4
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	440b      	add	r3, r1
 800303a:	761a      	strb	r2, [r3, #24]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000e100 	.word	0xe000e100
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f1c3 0307 	rsb	r3, r3, #7
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf28      	it	cs
 800306e:	2304      	movcs	r3, #4
 8003070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3304      	adds	r3, #4
 8003076:	2b06      	cmp	r3, #6
 8003078:	d902      	bls.n	8003080 <NVIC_EncodePriority+0x30>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3b03      	subs	r3, #3
 800307e:	e000      	b.n	8003082 <NVIC_EncodePriority+0x32>
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	401a      	ands	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43d9      	mvns	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	4313      	orrs	r3, r2
         );
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3724      	adds	r7, #36	; 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c8:	d301      	bcc.n	80030ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00f      	b.n	80030ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <SysTick_Config+0x40>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d6:	210f      	movs	r1, #15
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030dc:	f7ff ff8e 	bl	8002ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <SysTick_Config+0x40>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <SysTick_Config+0x40>)
 80030e8:	2207      	movs	r2, #7
 80030ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff29 	bl	8002f5c <__NVIC_SetPriorityGrouping>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003124:	f7ff ff3e 	bl	8002fa4 <__NVIC_GetPriorityGrouping>
 8003128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff8e 	bl	8003050 <NVIC_EncodePriority>
 8003134:	4602      	mov	r2, r0
 8003136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff5d 	bl	8002ffc <__NVIC_SetPriority>
}
 8003142:	bf00      	nop
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff31 	bl	8002fc0 <__NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffa2 	bl	80030b8 <SysTick_Config>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e098      	b.n	80032c4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_DMA_Init+0x150>)
 800319a:	429a      	cmp	r2, r3
 800319c:	d80f      	bhi.n	80031be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b4b      	ldr	r3, [pc, #300]	; (80032d4 <HAL_DMA_Init+0x154>)
 80031a6:	4413      	add	r3, r2
 80031a8:	4a4b      	ldr	r2, [pc, #300]	; (80032d8 <HAL_DMA_Init+0x158>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	009a      	lsls	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a48      	ldr	r2, [pc, #288]	; (80032dc <HAL_DMA_Init+0x15c>)
 80031ba:	641a      	str	r2, [r3, #64]	; 0x40
 80031bc:	e00e      	b.n	80031dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_DMA_Init+0x160>)
 80031c6:	4413      	add	r3, r2
 80031c8:	4a43      	ldr	r2, [pc, #268]	; (80032d8 <HAL_DMA_Init+0x158>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	009a      	lsls	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a42      	ldr	r2, [pc, #264]	; (80032e4 <HAL_DMA_Init+0x164>)
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800320c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003236:	d039      	beq.n	80032ac <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	4a27      	ldr	r2, [pc, #156]	; (80032dc <HAL_DMA_Init+0x15c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d11a      	bne.n	8003278 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003242:	4b29      	ldr	r3, [pc, #164]	; (80032e8 <HAL_DMA_Init+0x168>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f003 031c 	and.w	r3, r3, #28
 800324e:	210f      	movs	r1, #15
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	4924      	ldr	r1, [pc, #144]	; (80032e8 <HAL_DMA_Init+0x168>)
 8003258:	4013      	ands	r3, r2
 800325a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800325c:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_DMA_Init+0x168>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f003 031c 	and.w	r3, r3, #28
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	491d      	ldr	r1, [pc, #116]	; (80032e8 <HAL_DMA_Init+0x168>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
 8003276:	e019      	b.n	80032ac <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003278:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <HAL_DMA_Init+0x16c>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f003 031c 	and.w	r3, r3, #28
 8003284:	210f      	movs	r1, #15
 8003286:	fa01 f303 	lsl.w	r3, r1, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	4917      	ldr	r1, [pc, #92]	; (80032ec <HAL_DMA_Init+0x16c>)
 800328e:	4013      	ands	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003292:	4b16      	ldr	r3, [pc, #88]	; (80032ec <HAL_DMA_Init+0x16c>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f003 031c 	and.w	r3, r3, #28
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	4911      	ldr	r1, [pc, #68]	; (80032ec <HAL_DMA_Init+0x16c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3714      	adds	r7, #20
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40020407 	.word	0x40020407
 80032d4:	bffdfff8 	.word	0xbffdfff8
 80032d8:	cccccccd 	.word	0xcccccccd
 80032dc:	40020000 	.word	0x40020000
 80032e0:	bffdfbf8 	.word	0xbffdfbf8
 80032e4:	40020400 	.word	0x40020400
 80032e8:	400200a8 	.word	0x400200a8
 80032ec:	400204a8 	.word	0x400204a8

080032f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_DMA_Start_IT+0x20>
 800330c:	2302      	movs	r3, #2
 800330e:	e04b      	b.n	80033a8 <HAL_DMA_Start_IT+0xb8>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d13a      	bne.n	800339a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 0201 	bic.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f8e0 	bl	800350e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 020e 	orr.w	r2, r2, #14
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	e00f      	b.n	8003388 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0204 	bic.w	r2, r2, #4
 8003376:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 020a 	orr.w	r2, r2, #10
 8003386:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0201 	orr.w	r2, r2, #1
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	e005      	b.n	80033a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033a2:	2302      	movs	r3, #2
 80033a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	f003 031c 	and.w	r3, r3, #28
 80033d0:	2204      	movs	r2, #4
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d026      	beq.n	800342a <HAL_DMA_IRQHandler+0x7a>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d021      	beq.n	800342a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0320 	and.w	r3, r3, #32
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d107      	bne.n	8003404 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0204 	bic.w	r2, r2, #4
 8003402:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f003 021c 	and.w	r2, r3, #28
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2104      	movs	r1, #4
 8003412:	fa01 f202 	lsl.w	r2, r1, r2
 8003416:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	2b00      	cmp	r3, #0
 800341e:	d071      	beq.n	8003504 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003428:	e06c      	b.n	8003504 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f003 031c 	and.w	r3, r3, #28
 8003432:	2202      	movs	r2, #2
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d02e      	beq.n	800349c <HAL_DMA_IRQHandler+0xec>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d029      	beq.n	800349c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 020a 	bic.w	r2, r2, #10
 8003464:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f003 021c 	and.w	r2, r3, #28
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2102      	movs	r1, #2
 800347c:	fa01 f202 	lsl.w	r2, r1, r2
 8003480:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d038      	beq.n	8003504 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800349a:	e033      	b.n	8003504 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f003 031c 	and.w	r3, r3, #28
 80034a4:	2208      	movs	r2, #8
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02a      	beq.n	8003506 <HAL_DMA_IRQHandler+0x156>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d025      	beq.n	8003506 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 020e 	bic.w	r2, r2, #14
 80034c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	f003 021c 	and.w	r2, r3, #28
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	2101      	movs	r1, #1
 80034d8:	fa01 f202 	lsl.w	r2, r1, r2
 80034dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d004      	beq.n	8003506 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003504:	bf00      	nop
 8003506:	bf00      	nop
}
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f003 021c 	and.w	r2, r3, #28
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	2101      	movs	r1, #1
 800352a:	fa01 f202 	lsl.w	r2, r1, r2
 800352e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b10      	cmp	r3, #16
 800353e:	d108      	bne.n	8003552 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003550:	e007      	b.n	8003562 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	60da      	str	r2, [r3, #12]
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800357e:	e148      	b.n	8003812 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	4013      	ands	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 813a 	beq.w	800380c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d005      	beq.n	80035b0 <HAL_GPIO_Init+0x40>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d130      	bne.n	8003612 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4013      	ands	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035e6:	2201      	movs	r2, #1
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	f003 0201 	and.w	r2, r3, #1
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b03      	cmp	r3, #3
 800361c:	d017      	beq.n	800364e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d123      	bne.n	80036a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	08da      	lsrs	r2, r3, #3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3208      	adds	r2, #8
 8003662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	220f      	movs	r2, #15
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	08da      	lsrs	r2, r3, #3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3208      	adds	r2, #8
 800369c:	6939      	ldr	r1, [r7, #16]
 800369e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4013      	ands	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0203 	and.w	r2, r3, #3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8094 	beq.w	800380c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e4:	4b52      	ldr	r3, [pc, #328]	; (8003830 <HAL_GPIO_Init+0x2c0>)
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_GPIO_Init+0x2c0>)
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	6613      	str	r3, [r2, #96]	; 0x60
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <HAL_GPIO_Init+0x2c0>)
 80036f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036fc:	4a4d      	ldr	r2, [pc, #308]	; (8003834 <HAL_GPIO_Init+0x2c4>)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	220f      	movs	r2, #15
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003726:	d00d      	beq.n	8003744 <HAL_GPIO_Init+0x1d4>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a43      	ldr	r2, [pc, #268]	; (8003838 <HAL_GPIO_Init+0x2c8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <HAL_GPIO_Init+0x1d0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a42      	ldr	r2, [pc, #264]	; (800383c <HAL_GPIO_Init+0x2cc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_GPIO_Init+0x1cc>
 8003738:	2302      	movs	r3, #2
 800373a:	e004      	b.n	8003746 <HAL_GPIO_Init+0x1d6>
 800373c:	2307      	movs	r3, #7
 800373e:	e002      	b.n	8003746 <HAL_GPIO_Init+0x1d6>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <HAL_GPIO_Init+0x1d6>
 8003744:	2300      	movs	r3, #0
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	f002 0203 	and.w	r2, r2, #3
 800374c:	0092      	lsls	r2, r2, #2
 800374e:	4093      	lsls	r3, r2
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003756:	4937      	ldr	r1, [pc, #220]	; (8003834 <HAL_GPIO_Init+0x2c4>)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	3302      	adds	r3, #2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003788:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800378e:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037b2:	4a23      	ldr	r2, [pc, #140]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037e2:	4b17      	ldr	r3, [pc, #92]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003806:	4a0e      	ldr	r2, [pc, #56]	; (8003840 <HAL_GPIO_Init+0x2d0>)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	3301      	adds	r3, #1
 8003810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	f47f aeaf 	bne.w	8003580 <HAL_GPIO_Init+0x10>
  }
}
 8003822:	bf00      	nop
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40021000 	.word	0x40021000
 8003834:	40010000 	.word	0x40010000
 8003838:	48000400 	.word	0x48000400
 800383c:	48000800 	.word	0x48000800
 8003840:	40010400 	.word	0x40010400

08003844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	887b      	ldrh	r3, [r7, #2]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d002      	beq.n	8003862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	e001      	b.n	8003866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]
 8003880:	4613      	mov	r3, r2
 8003882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003884:	787b      	ldrb	r3, [r7, #1]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003890:	e002      	b.n	8003898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40007000 	.word	0x40007000

080038c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <HAL_PWREx_GetVoltageRange+0x18>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40007000 	.word	0x40007000

080038e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ee:	d130      	bne.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fc:	d038      	beq.n	8003970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2232      	movs	r2, #50	; 0x32
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0c9b      	lsrs	r3, r3, #18
 8003920:	3301      	adds	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003924:	e002      	b.n	800392c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3b01      	subs	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003938:	d102      	bne.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f2      	bne.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394c:	d110      	bne.n	8003970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e00f      	b.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395e:	d007      	beq.n	8003970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003960:	4b07      	ldr	r3, [pc, #28]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003968:	4a05      	ldr	r2, [pc, #20]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800396e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40007000 	.word	0x40007000
 8003984:	20000000 	.word	0x20000000
 8003988:	431bde83 	.word	0x431bde83

0800398c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d102      	bne.n	80039a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f000 bc02 	b.w	80041a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a0:	4b96      	ldr	r3, [pc, #600]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039aa:	4b94      	ldr	r3, [pc, #592]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f000 80e4 	beq.w	8003b8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4c>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	f040 808b 	bne.w	8003ae6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	f040 8087 	bne.w	8003ae6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039d8:	4b88      	ldr	r3, [pc, #544]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_OscConfig+0x64>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e3d9      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1a      	ldr	r2, [r3, #32]
 80039f4:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <HAL_RCC_OscConfig+0x7e>
 8003a00:	4b7e      	ldr	r3, [pc, #504]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a08:	e005      	b.n	8003a16 <HAL_RCC_OscConfig+0x8a>
 8003a0a:	4b7c      	ldr	r3, [pc, #496]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d223      	bcs.n	8003a62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fd54 	bl	80044cc <RCC_SetFlashLatencyFromMSIRange>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e3ba      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a2e:	4b73      	ldr	r3, [pc, #460]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a72      	ldr	r2, [pc, #456]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a34:	f043 0308 	orr.w	r3, r3, #8
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b70      	ldr	r3, [pc, #448]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	496d      	ldr	r1, [pc, #436]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a4c:	4b6b      	ldr	r3, [pc, #428]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	4968      	ldr	r1, [pc, #416]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
 8003a60:	e025      	b.n	8003aae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a62:	4b66      	ldr	r3, [pc, #408]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a68:	f043 0308 	orr.w	r3, r3, #8
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	4b63      	ldr	r3, [pc, #396]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4960      	ldr	r1, [pc, #384]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a80:	4b5e      	ldr	r3, [pc, #376]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	021b      	lsls	r3, r3, #8
 8003a8e:	495b      	ldr	r1, [pc, #364]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fd14 	bl	80044cc <RCC_SetFlashLatencyFromMSIRange>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e37a      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aae:	f000 fc81 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b51      	ldr	r3, [pc, #324]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	4950      	ldr	r1, [pc, #320]	; (8003c00 <HAL_RCC_OscConfig+0x274>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	4a4e      	ldr	r2, [pc, #312]	; (8003c04 <HAL_RCC_OscConfig+0x278>)
 8003acc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ace:	4b4e      	ldr	r3, [pc, #312]	; (8003c08 <HAL_RCC_OscConfig+0x27c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe f916 	bl	8001d04 <HAL_InitTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d052      	beq.n	8003b88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	e35e      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d032      	beq.n	8003b54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003aee:	4b43      	ldr	r3, [pc, #268]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a42      	ldr	r2, [pc, #264]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003afa:	f7fe f953 	bl	8001da4 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b02:	f7fe f94f 	bl	8001da4 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e347      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b14:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a35      	ldr	r2, [pc, #212]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b26:	f043 0308 	orr.w	r3, r3, #8
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	4930      	ldr	r1, [pc, #192]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b3e:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	492b      	ldr	r1, [pc, #172]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
 8003b52:	e01a      	b.n	8003b8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b54:	4b29      	ldr	r3, [pc, #164]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b60:	f7fe f920 	bl	8001da4 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b68:	f7fe f91c 	bl	8001da4 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e314      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x1dc>
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d073      	beq.n	8003c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x21c>
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b0c      	cmp	r3, #12
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d063      	beq.n	8003c7c <HAL_RCC_OscConfig+0x2f0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d15f      	bne.n	8003c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e2f1      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc8:	d106      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x24c>
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a0b      	ldr	r2, [pc, #44]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e025      	b.n	8003c24 <HAL_RCC_OscConfig+0x298>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be0:	d114      	bne.n	8003c0c <HAL_RCC_OscConfig+0x280>
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a05      	ldr	r2, [pc, #20]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a02      	ldr	r2, [pc, #8]	; (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e013      	b.n	8003c24 <HAL_RCC_OscConfig+0x298>
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	08007198 	.word	0x08007198
 8003c04:	20000000 	.word	0x20000000
 8003c08:	20000004 	.word	0x20000004
 8003c0c:	4ba0      	ldr	r3, [pc, #640]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a9f      	ldr	r2, [pc, #636]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b9d      	ldr	r3, [pc, #628]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a9c      	ldr	r2, [pc, #624]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2c:	f7fe f8ba 	bl	8001da4 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fe f8b6 	bl	8001da4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e2ae      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c46:	4b92      	ldr	r3, [pc, #584]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x2a8>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe f8a6 	bl	8001da4 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fe f8a2 	bl	8001da4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e29a      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c6e:	4b88      	ldr	r3, [pc, #544]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x2d0>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d060      	beq.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_OscConfig+0x310>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d116      	bne.n	8003cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c9c:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x328>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e277      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	4973      	ldr	r1, [pc, #460]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc8:	e040      	b.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d023      	beq.n	8003d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd2:	4b6f      	ldr	r3, [pc, #444]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6e      	ldr	r2, [pc, #440]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7fe f861 	bl	8001da4 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce6:	f7fe f85d 	bl	8001da4 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e255      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf8:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d04:	4b62      	ldr	r3, [pc, #392]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	495f      	ldr	r1, [pc, #380]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
 8003d18:	e018      	b.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1a:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a5c      	ldr	r2, [pc, #368]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fe f83d 	bl	8001da4 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fe f839 	bl	8001da4 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e231      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d40:	4b53      	ldr	r3, [pc, #332]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d03c      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01c      	beq.n	8003d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d60:	4b4b      	ldr	r3, [pc, #300]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d66:	4a4a      	ldr	r2, [pc, #296]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fe f818 	bl	8001da4 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fe f814 	bl	8001da4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e20c      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <HAL_RCC_OscConfig+0x3ec>
 8003d98:	e01b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9a:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da0:	4a3b      	ldr	r2, [pc, #236]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003daa:	f7fd fffb 	bl	8001da4 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fd fff7 	bl	8001da4 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e1ef      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc4:	4b32      	ldr	r3, [pc, #200]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ef      	bne.n	8003db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80a6 	beq.w	8003f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de0:	2300      	movs	r3, #0
 8003de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003de4:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10d      	bne.n	8003e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df0:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	4a26      	ldr	r2, [pc, #152]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0c:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <HAL_RCC_OscConfig+0x508>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d118      	bne.n	8003e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e18:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <HAL_RCC_OscConfig+0x508>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <HAL_RCC_OscConfig+0x508>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e24:	f7fd ffbe 	bl	8001da4 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fd ffba 	bl	8001da4 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e1b2      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_RCC_OscConfig+0x508>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d108      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4d8>
 8003e52:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	4a0d      	ldr	r2, [pc, #52]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e62:	e029      	b.n	8003eb8 <HAL_RCC_OscConfig+0x52c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d115      	bne.n	8003e98 <HAL_RCC_OscConfig+0x50c>
 8003e6c:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	4a07      	ldr	r2, [pc, #28]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	4a03      	ldr	r2, [pc, #12]	; (8003e90 <HAL_RCC_OscConfig+0x504>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e8c:	e014      	b.n	8003eb8 <HAL_RCC_OscConfig+0x52c>
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40007000 	.word	0x40007000
 8003e98:	4b9a      	ldr	r3, [pc, #616]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	4a99      	ldr	r2, [pc, #612]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea8:	4b96      	ldr	r3, [pc, #600]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	4a95      	ldr	r2, [pc, #596]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d016      	beq.n	8003eee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd ff70 	bl	8001da4 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd ff6c 	bl	8001da4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e162      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ede:	4b89      	ldr	r3, [pc, #548]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ed      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x53c>
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eee:	f7fd ff59 	bl	8001da4 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fd ff55 	bl	8001da4 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e14b      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f0c:	4b7d      	ldr	r3, [pc, #500]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1ed      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1a:	7ffb      	ldrb	r3, [r7, #31]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f20:	4b78      	ldr	r3, [pc, #480]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	4a77      	ldr	r2, [pc, #476]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d03c      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01c      	beq.n	8003f7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f40:	4b70      	ldr	r3, [pc, #448]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f46:	4a6f      	ldr	r2, [pc, #444]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fd ff28 	bl	8001da4 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f58:	f7fd ff24 	bl	8001da4 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e11c      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f6a:	4b66      	ldr	r3, [pc, #408]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0ef      	beq.n	8003f58 <HAL_RCC_OscConfig+0x5cc>
 8003f78:	e01b      	b.n	8003fb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f7a:	4b62      	ldr	r3, [pc, #392]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f80:	4a60      	ldr	r2, [pc, #384]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003f82:	f023 0301 	bic.w	r3, r3, #1
 8003f86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fd ff0b 	bl	8001da4 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f92:	f7fd ff07 	bl	8001da4 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0ff      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fa4:	4b57      	ldr	r3, [pc, #348]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ef      	bne.n	8003f92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80f3 	beq.w	80041a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	f040 80c9 	bne.w	8004158 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fc6:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0203 	and.w	r2, r3, #3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d12c      	bne.n	8004034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d123      	bne.n	8004034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d11b      	bne.n	8004034 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d113      	bne.n	8004034 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d109      	bne.n	8004034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	085b      	lsrs	r3, r3, #1
 800402c:	3b01      	subs	r3, #1
 800402e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d06b      	beq.n	800410c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d062      	beq.n	8004100 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800403a:	4b32      	ldr	r3, [pc, #200]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e0ac      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800404a:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a2d      	ldr	r2, [pc, #180]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8004050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004054:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004056:	f7fd fea5 	bl	8001da4 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405e:	f7fd fea1 	bl	8001da4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e099      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004070:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f0      	bne.n	800405e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800407c:	4b21      	ldr	r3, [pc, #132]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	4b21      	ldr	r3, [pc, #132]	; (8004108 <HAL_RCC_OscConfig+0x77c>)
 8004082:	4013      	ands	r3, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800408c:	3a01      	subs	r2, #1
 800408e:	0112      	lsls	r2, r2, #4
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004096:	0212      	lsls	r2, r2, #8
 8004098:	4311      	orrs	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800409e:	0852      	lsrs	r2, r2, #1
 80040a0:	3a01      	subs	r2, #1
 80040a2:	0552      	lsls	r2, r2, #21
 80040a4:	4311      	orrs	r1, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040aa:	0852      	lsrs	r2, r2, #1
 80040ac:	3a01      	subs	r2, #1
 80040ae:	0652      	lsls	r2, r2, #25
 80040b0:	4311      	orrs	r1, r2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b6:	06d2      	lsls	r2, r2, #27
 80040b8:	430a      	orrs	r2, r1
 80040ba:	4912      	ldr	r1, [pc, #72]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a0c      	ldr	r2, [pc, #48]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 80040d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040d8:	f7fd fe64 	bl	8001da4 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fd fe60 	bl	8001da4 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e058      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <HAL_RCC_OscConfig+0x778>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040fe:	e050      	b.n	80041a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04f      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
 8004104:	40021000 	.word	0x40021000
 8004108:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d144      	bne.n	80041a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004118:	4b24      	ldr	r3, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a23      	ldr	r2, [pc, #140]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 800411e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004122:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004124:	4b21      	ldr	r3, [pc, #132]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a20      	ldr	r2, [pc, #128]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 800412a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004130:	f7fd fe38 	bl	8001da4 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fd fe34 	bl	8001da4 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e02c      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800414a:	4b18      	ldr	r3, [pc, #96]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f0      	beq.n	8004138 <HAL_RCC_OscConfig+0x7ac>
 8004156:	e024      	b.n	80041a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d01f      	beq.n	800419e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 8004164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fd fe1b 	bl	8001da4 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004172:	f7fd fe17 	bl	8001da4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e00f      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	4905      	ldr	r1, [pc, #20]	; (80041ac <HAL_RCC_OscConfig+0x820>)
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCC_OscConfig+0x824>)
 8004198:	4013      	ands	r3, r2
 800419a:	60cb      	str	r3, [r1, #12]
 800419c:	e001      	b.n	80041a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3720      	adds	r7, #32
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000
 80041b0:	feeefffc 	.word	0xfeeefffc

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0e7      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c8:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d910      	bls.n	80041f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b72      	ldr	r3, [pc, #456]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 0207 	bic.w	r2, r3, #7
 80041de:	4970      	ldr	r1, [pc, #448]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b6e      	ldr	r3, [pc, #440]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0cf      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d010      	beq.n	8004226 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b66      	ldr	r3, [pc, #408]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004210:	429a      	cmp	r2, r3
 8004212:	d908      	bls.n	8004226 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004214:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4960      	ldr	r1, [pc, #384]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d04c      	beq.n	80042cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d107      	bne.n	800424a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423a:	4b5a      	ldr	r3, [pc, #360]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d121      	bne.n	800428a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0a6      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004252:	4b54      	ldr	r3, [pc, #336]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d115      	bne.n	800428a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e09a      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800426a:	4b4e      	ldr	r3, [pc, #312]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e08e      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800427a:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e086      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800428a:	4b46      	ldr	r3, [pc, #280]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f023 0203 	bic.w	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4943      	ldr	r1, [pc, #268]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429c:	f7fd fd82 	bl	8001da4 <HAL_GetTick>
 80042a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a4:	f7fd fd7e 	bl	8001da4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e06e      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 020c 	and.w	r2, r3, #12
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d1eb      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d208      	bcs.n	80042fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e8:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	492b      	ldr	r1, [pc, #172]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042fa:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d210      	bcs.n	800432a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 0207 	bic.w	r2, r3, #7
 8004310:	4923      	ldr	r1, [pc, #140]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004318:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d001      	beq.n	800432a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e036      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	4918      	ldr	r1, [pc, #96]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004344:	4313      	orrs	r3, r2
 8004346:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004354:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4910      	ldr	r1, [pc, #64]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004368:	f000 f824 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	490b      	ldr	r1, [pc, #44]	; (80043a8 <HAL_RCC_ClockConfig+0x1f4>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
 8004384:	4a09      	ldr	r2, [pc, #36]	; (80043ac <HAL_RCC_ClockConfig+0x1f8>)
 8004386:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x1fc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7fd fcb9 	bl	8001d04 <HAL_InitTick>
 8004392:	4603      	mov	r3, r0
 8004394:	72fb      	strb	r3, [r7, #11]

  return status;
 8004396:	7afb      	ldrb	r3, [r7, #11]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40022000 	.word	0x40022000
 80043a4:	40021000 	.word	0x40021000
 80043a8:	08007198 	.word	0x08007198
 80043ac:	20000000 	.word	0x20000000
 80043b0:	20000004 	.word	0x20000004

080043b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c2:	4b3e      	ldr	r3, [pc, #248]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043cc:	4b3b      	ldr	r3, [pc, #236]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x34>
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d121      	bne.n	8004426 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d11e      	bne.n	8004426 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043e8:	4b34      	ldr	r3, [pc, #208]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d107      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043f4:	4b31      	ldr	r3, [pc, #196]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 80043f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	e005      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004404:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004410:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004418:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004424:	e00a      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d102      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800442c:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e004      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d101      	bne.n	800443c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004438:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800443a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d134      	bne.n	80044ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004442:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d003      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0xa6>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d003      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0xac>
 8004458:	e005      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800445a:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800445c:	617b      	str	r3, [r7, #20]
      break;
 800445e:	e005      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004460:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004462:	617b      	str	r3, [r7, #20]
      break;
 8004464:	e002      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	617b      	str	r3, [r7, #20]
      break;
 800446a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800446c:	4b13      	ldr	r3, [pc, #76]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	3301      	adds	r3, #1
 8004478:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	fb03 f202 	mul.w	r2, r3, r2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	0e5b      	lsrs	r3, r3, #25
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	3301      	adds	r3, #1
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044ac:	69bb      	ldr	r3, [r7, #24]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3724      	adds	r7, #36	; 0x24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	080071a8 	.word	0x080071a8
 80044c4:	00f42400 	.word	0x00f42400
 80044c8:	007a1200 	.word	0x007a1200

080044cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044d8:	4b2a      	ldr	r3, [pc, #168]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044e4:	f7ff f9ee 	bl	80038c4 <HAL_PWREx_GetVoltageRange>
 80044e8:	6178      	str	r0, [r7, #20]
 80044ea:	e014      	b.n	8004516 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	4a24      	ldr	r2, [pc, #144]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6593      	str	r3, [r2, #88]	; 0x58
 80044f8:	4b22      	ldr	r3, [pc, #136]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004504:	f7ff f9de 	bl	80038c4 <HAL_PWREx_GetVoltageRange>
 8004508:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004514:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451c:	d10b      	bne.n	8004536 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b80      	cmp	r3, #128	; 0x80
 8004522:	d919      	bls.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2ba0      	cmp	r3, #160	; 0xa0
 8004528:	d902      	bls.n	8004530 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800452a:	2302      	movs	r3, #2
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	e013      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004530:	2301      	movs	r3, #1
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	e010      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b80      	cmp	r3, #128	; 0x80
 800453a:	d902      	bls.n	8004542 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800453c:	2303      	movs	r3, #3
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e00a      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b80      	cmp	r3, #128	; 0x80
 8004546:	d102      	bne.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004548:	2302      	movs	r3, #2
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e004      	b.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b70      	cmp	r3, #112	; 0x70
 8004552:	d101      	bne.n	8004558 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004554:	2301      	movs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f023 0207 	bic.w	r2, r3, #7
 8004560:	4909      	ldr	r1, [pc, #36]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000
 8004588:	40022000 	.word	0x40022000

0800458c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004594:	2300      	movs	r3, #0
 8004596:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004598:	2300      	movs	r3, #0
 800459a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d031      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045b0:	d01a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045b6:	d814      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045c0:	d10f      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80045c2:	4b5d      	ldr	r3, [pc, #372]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	4a5c      	ldr	r2, [pc, #368]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ce:	e00c      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f9de 	bl	8004998 <RCCEx_PLLSAI1_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e0:	e003      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	74fb      	strb	r3, [r7, #19]
      break;
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045f0:	4b51      	ldr	r3, [pc, #324]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	494e      	ldr	r1, [pc, #312]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004606:	e001      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	f000 809e 	beq.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461a:	2300      	movs	r3, #0
 800461c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800461e:	4b46      	ldr	r3, [pc, #280]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00d      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004634:	4b40      	ldr	r3, [pc, #256]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	4a3f      	ldr	r2, [pc, #252]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463e:	6593      	str	r3, [r2, #88]	; 0x58
 8004640:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464c:	2301      	movs	r3, #1
 800464e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004650:	4b3a      	ldr	r3, [pc, #232]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a39      	ldr	r2, [pc, #228]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800465c:	f7fd fba2 	bl	8001da4 <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004662:	e009      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004664:	f7fd fb9e 	bl	8001da4 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d902      	bls.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	74fb      	strb	r3, [r7, #19]
        break;
 8004676:	e005      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004678:	4b30      	ldr	r3, [pc, #192]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ef      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d15a      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800468a:	4b2b      	ldr	r3, [pc, #172]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004694:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01e      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d019      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b2:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b8:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	4a1b      	ldr	r2, [pc, #108]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d2:	4a19      	ldr	r2, [pc, #100]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d016      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd fb5e 	bl	8001da4 <HAL_GetTick>
 80046e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ea:	e00b      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fd fb5a 	bl	8001da4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d902      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	74fb      	strb	r3, [r7, #19]
            break;
 8004702:	e006      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ec      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004718:	4b07      	ldr	r3, [pc, #28]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800472e:	e009      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
 8004734:	e006      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004744:	7c7b      	ldrb	r3, [r7, #17]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474a:	4b8a      	ldr	r3, [pc, #552]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	4a89      	ldr	r2, [pc, #548]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004754:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004762:	4b84      	ldr	r3, [pc, #528]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f023 0203 	bic.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4980      	ldr	r1, [pc, #512]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004784:	4b7b      	ldr	r3, [pc, #492]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478a:	f023 020c 	bic.w	r2, r3, #12
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	4978      	ldr	r1, [pc, #480]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047a6:	4b73      	ldr	r3, [pc, #460]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	496f      	ldr	r1, [pc, #444]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	4967      	ldr	r1, [pc, #412]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047ea:	4b62      	ldr	r3, [pc, #392]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	495e      	ldr	r1, [pc, #376]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00a      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800480c:	4b59      	ldr	r3, [pc, #356]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	4956      	ldr	r1, [pc, #344]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800482e:	4b51      	ldr	r3, [pc, #324]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	494d      	ldr	r1, [pc, #308]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d028      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004850:	4b48      	ldr	r3, [pc, #288]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	4945      	ldr	r1, [pc, #276]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800486e:	d106      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004870:	4b40      	ldr	r3, [pc, #256]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a3f      	ldr	r2, [pc, #252]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800487a:	60d3      	str	r3, [r2, #12]
 800487c:	e011      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004886:	d10c      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f882 	bl	8004998 <RCCEx_PLLSAI1_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d028      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048ae:	4b31      	ldr	r3, [pc, #196]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048bc:	492d      	ldr	r1, [pc, #180]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048cc:	d106      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ce:	4b29      	ldr	r3, [pc, #164]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	4a28      	ldr	r2, [pc, #160]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d8:	60d3      	str	r3, [r2, #12]
 80048da:	e011      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	2101      	movs	r1, #1
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f853 	bl	8004998 <RCCEx_PLLSAI1_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01c      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491a:	4916      	ldr	r1, [pc, #88]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800492a:	d10c      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f830 	bl	8004998 <RCCEx_PLLSAI1_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004960:	4904      	ldr	r1, [pc, #16]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004968:	7cbb      	ldrb	r3, [r7, #18]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000

08004978 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800497c:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a04      	ldr	r2, [pc, #16]	; (8004994 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004982:	f043 0304 	orr.w	r3, r3, #4
 8004986:	6013      	str	r3, [r2, #0]
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000

08004998 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049a6:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d018      	beq.n	80049e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049b2:	4b71      	ldr	r3, [pc, #452]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0203 	and.w	r2, r3, #3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d10d      	bne.n	80049de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
       ||
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049ca:	4b6b      	ldr	r3, [pc, #428]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	091b      	lsrs	r3, r3, #4
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
       ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d047      	beq.n	8004a6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	e044      	b.n	8004a6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d018      	beq.n	8004a1e <RCCEx_PLLSAI1_Config+0x86>
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d825      	bhi.n	8004a3c <RCCEx_PLLSAI1_Config+0xa4>
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d002      	beq.n	80049fa <RCCEx_PLLSAI1_Config+0x62>
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d009      	beq.n	8004a0c <RCCEx_PLLSAI1_Config+0x74>
 80049f8:	e020      	b.n	8004a3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049fa:	4b5f      	ldr	r3, [pc, #380]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d11d      	bne.n	8004a42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0a:	e01a      	b.n	8004a42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a0c:	4b5a      	ldr	r3, [pc, #360]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d116      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1c:	e013      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a1e:	4b56      	ldr	r3, [pc, #344]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d109      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a3a:	e006      	b.n	8004a4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a40:	e004      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a52:	4b49      	ldr	r3, [pc, #292]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6819      	ldr	r1, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	3b01      	subs	r3, #1
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	430b      	orrs	r3, r1
 8004a68:	4943      	ldr	r1, [pc, #268]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d17c      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a74:	4b40      	ldr	r3, [pc, #256]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a3f      	ldr	r2, [pc, #252]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a80:	f7fd f990 	bl	8001da4 <HAL_GetTick>
 8004a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a86:	e009      	b.n	8004a9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a88:	f7fd f98c 	bl	8001da4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d902      	bls.n	8004a9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	73fb      	strb	r3, [r7, #15]
        break;
 8004a9a:	e005      	b.n	8004aa8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a9c:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1ef      	bne.n	8004a88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aa8:	7bfb      	ldrb	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d15f      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d110      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004abc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6892      	ldr	r2, [r2, #8]
 8004ac4:	0211      	lsls	r1, r2, #8
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68d2      	ldr	r2, [r2, #12]
 8004aca:	06d2      	lsls	r2, r2, #27
 8004acc:	430a      	orrs	r2, r1
 8004ace:	492a      	ldr	r1, [pc, #168]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	610b      	str	r3, [r1, #16]
 8004ad4:	e027      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d112      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004adc:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ae4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6892      	ldr	r2, [r2, #8]
 8004aec:	0211      	lsls	r1, r2, #8
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6912      	ldr	r2, [r2, #16]
 8004af2:	0852      	lsrs	r2, r2, #1
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0552      	lsls	r2, r2, #21
 8004af8:	430a      	orrs	r2, r1
 8004afa:	491f      	ldr	r1, [pc, #124]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	610b      	str	r3, [r1, #16]
 8004b00:	e011      	b.n	8004b26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b02:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6892      	ldr	r2, [r2, #8]
 8004b12:	0211      	lsls	r1, r2, #8
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6952      	ldr	r2, [r2, #20]
 8004b18:	0852      	lsrs	r2, r2, #1
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	0652      	lsls	r2, r2, #25
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	4915      	ldr	r1, [pc, #84]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a13      	ldr	r2, [pc, #76]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b32:	f7fd f937 	bl	8001da4 <HAL_GetTick>
 8004b36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b38:	e009      	b.n	8004b4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b3a:	f7fd f933 	bl	8001da4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d902      	bls.n	8004b4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8004b4c:	e005      	b.n	8004b5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b60:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	4903      	ldr	r1, [pc, #12]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000

08004b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e049      	b.n	8004c22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc ff7a 	bl	8001a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f000 fd50 	bl	8005660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d001      	beq.n	8004c44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e03b      	b.n	8004cbc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f042 0201 	orr.w	r2, r2, #1
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x4e>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d004      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x4e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <HAL_TIM_Base_Start_IT+0xa0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d115      	bne.n	8004ca6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b06      	cmp	r3, #6
 8004c8a:	d015      	beq.n	8004cb8 <HAL_TIM_Base_Start_IT+0x8c>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c92:	d011      	beq.n	8004cb8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	e008      	b.n	8004cb8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e000      	b.n	8004cba <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	00010007 	.word	0x00010007

08004cd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e049      	b.n	8004d7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc fe60 	bl	80019c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	4619      	mov	r1, r3
 8004d12:	4610      	mov	r0, r2
 8004d14:	f000 fca4 	bl	8005660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_TIM_PWM_Start+0x24>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	e03c      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d109      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x3e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	bf14      	ite	ne
 8004dba:	2301      	movne	r3, #1
 8004dbc:	2300      	moveq	r3, #0
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	e02f      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d109      	bne.n	8004ddc <HAL_TIM_PWM_Start+0x58>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e022      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d109      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x72>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e015      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b10      	cmp	r3, #16
 8004dfa:	d109      	bne.n	8004e10 <HAL_TIM_PWM_Start+0x8c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e008      	b.n	8004e22 <HAL_TIM_PWM_Start+0x9e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	bf14      	ite	ne
 8004e1c:	2301      	movne	r3, #1
 8004e1e:	2300      	moveq	r3, #0
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e07e      	b.n	8004f28 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Start+0xb6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e38:	e023      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Start+0xc6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e48:	e01b      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Start+0xd6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e58:	e013      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b0c      	cmp	r3, #12
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_PWM_Start+0xe6>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e68:	e00b      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Start+0xf6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e78:	e003      	b.n	8004e82 <HAL_TIM_PWM_Start+0xfe>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 feca 	bl	8005c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <HAL_TIM_PWM_Start+0x1ac>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_TIM_PWM_Start+0x12a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <HAL_TIM_PWM_Start+0x1b0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_TIM_PWM_Start+0x12a>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <HAL_TIM_PWM_Start+0x1b4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d101      	bne.n	8004eb2 <HAL_TIM_PWM_Start+0x12e>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <HAL_TIM_PWM_Start+0x130>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ec6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <HAL_TIM_PWM_Start+0x1ac>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d009      	beq.n	8004ee6 <HAL_TIM_PWM_Start+0x162>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eda:	d004      	beq.n	8004ee6 <HAL_TIM_PWM_Start+0x162>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a14      	ldr	r2, [pc, #80]	; (8004f34 <HAL_TIM_PWM_Start+0x1b0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d115      	bne.n	8004f12 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <HAL_TIM_PWM_Start+0x1b8>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b06      	cmp	r3, #6
 8004ef6:	d015      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x1a0>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efe:	d011      	beq.n	8004f24 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f10:	e008      	b.n	8004f24 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0201 	orr.w	r2, r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e000      	b.n	8004f26 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	00010007 	.word	0x00010007

08004f40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e097      	b.n	8005084 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7fc fd4f 	bl	8001a0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004f84:	f023 0307 	bic.w	r3, r3, #7
 8004f88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f000 fb63 	bl	8005660 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	021b      	lsls	r3, r3, #8
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fe0:	f023 030c 	bic.w	r3, r3, #12
 8004fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	011a      	lsls	r2, r3, #4
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	031b      	lsls	r3, r3, #12
 8005010:	4313      	orrs	r3, r2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005026:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	4313      	orrs	r3, r2
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800509c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d110      	bne.n	80050de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d102      	bne.n	80050c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050c2:	7b7b      	ldrb	r3, [r7, #13]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d001      	beq.n	80050cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e069      	b.n	80051a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050dc:	e031      	b.n	8005142 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d110      	bne.n	8005106 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050e4:	7bbb      	ldrb	r3, [r7, #14]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d102      	bne.n	80050f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050ea:	7b3b      	ldrb	r3, [r7, #12]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d001      	beq.n	80050f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e055      	b.n	80051a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005104:	e01d      	b.n	8005142 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d108      	bne.n	800511e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800510c:	7bbb      	ldrb	r3, [r7, #14]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d105      	bne.n	800511e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005112:	7b7b      	ldrb	r3, [r7, #13]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d102      	bne.n	800511e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005118:	7b3b      	ldrb	r3, [r7, #12]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d001      	beq.n	8005122 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e03e      	b.n	80051a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2202      	movs	r2, #2
 8005136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_TIM_Encoder_Start+0xc4>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d008      	beq.n	8005160 <HAL_TIM_Encoder_Start+0xd4>
 800514e:	e00f      	b.n	8005170 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2201      	movs	r2, #1
 8005156:	2100      	movs	r1, #0
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fd63 	bl	8005c24 <TIM_CCxChannelCmd>
      break;
 800515e:	e016      	b.n	800518e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2201      	movs	r2, #1
 8005166:	2104      	movs	r1, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fd5b 	bl	8005c24 <TIM_CCxChannelCmd>
      break;
 800516e:	e00e      	b.n	800518e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2201      	movs	r2, #1
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fd53 	bl	8005c24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2201      	movs	r2, #1
 8005184:	2104      	movs	r1, #4
 8005186:	4618      	mov	r0, r3
 8005188:	f000 fd4c 	bl	8005c24 <TIM_CCxChannelCmd>
      break;
 800518c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d122      	bne.n	8005204 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d11b      	bne.n	8005204 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0202 	mvn.w	r2, #2
 80051d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa1a 	bl	8005624 <HAL_TIM_IC_CaptureCallback>
 80051f0:	e005      	b.n	80051fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa0c 	bl	8005610 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fa1d 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b04      	cmp	r3, #4
 8005210:	d122      	bne.n	8005258 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b04      	cmp	r3, #4
 800521e:	d11b      	bne.n	8005258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0204 	mvn.w	r2, #4
 8005228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9f0 	bl	8005624 <HAL_TIM_IC_CaptureCallback>
 8005244:	e005      	b.n	8005252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f9e2 	bl	8005610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f9f3 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b08      	cmp	r3, #8
 8005264:	d122      	bne.n	80052ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b08      	cmp	r3, #8
 8005272:	d11b      	bne.n	80052ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f06f 0208 	mvn.w	r2, #8
 800527c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2204      	movs	r2, #4
 8005282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f9c6 	bl	8005624 <HAL_TIM_IC_CaptureCallback>
 8005298:	e005      	b.n	80052a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f9b8 	bl	8005610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f9c9 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d122      	bne.n	8005300 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0310 	and.w	r3, r3, #16
 80052c4:	2b10      	cmp	r3, #16
 80052c6:	d11b      	bne.n	8005300 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0210 	mvn.w	r2, #16
 80052d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2208      	movs	r2, #8
 80052d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f99c 	bl	8005624 <HAL_TIM_IC_CaptureCallback>
 80052ec:	e005      	b.n	80052fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f98e 	bl	8005610 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f99f 	bl	8005638 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d10e      	bne.n	800532c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b01      	cmp	r3, #1
 800531a:	d107      	bne.n	800532c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f06f 0201 	mvn.w	r2, #1
 8005324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fa5c 	bl	80017e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005336:	2b80      	cmp	r3, #128	; 0x80
 8005338:	d10e      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005344:	2b80      	cmp	r3, #128	; 0x80
 8005346:	d107      	bne.n	8005358 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fd74 	bl	8005e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005366:	d10e      	bne.n	8005386 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d107      	bne.n	8005386 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800537e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fd67 	bl	8005e54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d10e      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d107      	bne.n	80053b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f94d 	bl	800564c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d10e      	bne.n	80053de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d107      	bne.n	80053de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f06f 0220 	mvn.w	r2, #32
 80053d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fd27 	bl	8005e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005402:	2302      	movs	r3, #2
 8005404:	e0ff      	b.n	8005606 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b14      	cmp	r3, #20
 8005412:	f200 80f0 	bhi.w	80055f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	08005471 	.word	0x08005471
 8005420:	080055f7 	.word	0x080055f7
 8005424:	080055f7 	.word	0x080055f7
 8005428:	080055f7 	.word	0x080055f7
 800542c:	080054b1 	.word	0x080054b1
 8005430:	080055f7 	.word	0x080055f7
 8005434:	080055f7 	.word	0x080055f7
 8005438:	080055f7 	.word	0x080055f7
 800543c:	080054f3 	.word	0x080054f3
 8005440:	080055f7 	.word	0x080055f7
 8005444:	080055f7 	.word	0x080055f7
 8005448:	080055f7 	.word	0x080055f7
 800544c:	08005533 	.word	0x08005533
 8005450:	080055f7 	.word	0x080055f7
 8005454:	080055f7 	.word	0x080055f7
 8005458:	080055f7 	.word	0x080055f7
 800545c:	08005575 	.word	0x08005575
 8005460:	080055f7 	.word	0x080055f7
 8005464:	080055f7 	.word	0x080055f7
 8005468:	080055f7 	.word	0x080055f7
 800546c:	080055b5 	.word	0x080055b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f956 	bl	8005728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0208 	orr.w	r2, r2, #8
 800548a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0204 	bic.w	r2, r2, #4
 800549a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6999      	ldr	r1, [r3, #24]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	619a      	str	r2, [r3, #24]
      break;
 80054ae:	e0a5      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f9b2 	bl	8005820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6999      	ldr	r1, [r3, #24]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	021a      	lsls	r2, r3, #8
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	619a      	str	r2, [r3, #24]
      break;
 80054f0:	e084      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fa0b 	bl	8005914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0208 	orr.w	r2, r2, #8
 800550c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0204 	bic.w	r2, r2, #4
 800551c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69d9      	ldr	r1, [r3, #28]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	61da      	str	r2, [r3, #28]
      break;
 8005530:	e064      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fa63 	bl	8005a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800554c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800555c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69d9      	ldr	r1, [r3, #28]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	021a      	lsls	r2, r3, #8
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	61da      	str	r2, [r3, #28]
      break;
 8005572:	e043      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68b9      	ldr	r1, [r7, #8]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 faa0 	bl	8005ac0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0208 	orr.w	r2, r2, #8
 800558e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0204 	bic.w	r2, r2, #4
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055b2:	e023      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fad8 	bl	8005b70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	021a      	lsls	r2, r3, #8
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	430a      	orrs	r2, r1
 80055f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055f4:	e002      	b.n	80055fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
      break;
 80055fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005604:	7dfb      	ldrb	r3, [r7, #23]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop

08005610 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a2a      	ldr	r2, [pc, #168]	; (800571c <TIM_Base_SetConfig+0xbc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0x20>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d108      	bne.n	8005692 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a21      	ldr	r2, [pc, #132]	; (800571c <TIM_Base_SetConfig+0xbc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00b      	beq.n	80056b2 <TIM_Base_SetConfig+0x52>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d007      	beq.n	80056b2 <TIM_Base_SetConfig+0x52>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a1e      	ldr	r2, [pc, #120]	; (8005720 <TIM_Base_SetConfig+0xc0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_Base_SetConfig+0x52>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <TIM_Base_SetConfig+0xc4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d108      	bne.n	80056c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a0c      	ldr	r2, [pc, #48]	; (800571c <TIM_Base_SetConfig+0xbc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d007      	beq.n	8005700 <TIM_Base_SetConfig+0xa0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a0b      	ldr	r2, [pc, #44]	; (8005720 <TIM_Base_SetConfig+0xc0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_Base_SetConfig+0xa0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <TIM_Base_SetConfig+0xc4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d103      	bne.n	8005708 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	691a      	ldr	r2, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	615a      	str	r2, [r3, #20]
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40014000 	.word	0x40014000
 8005724:	40014400 	.word	0x40014400

08005728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005728:	b480      	push	{r7}
 800572a:	b087      	sub	sp, #28
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f023 0302 	bic.w	r3, r3, #2
 8005774:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a24      	ldr	r2, [pc, #144]	; (8005814 <TIM_OC1_SetConfig+0xec>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_OC1_SetConfig+0x70>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a23      	ldr	r2, [pc, #140]	; (8005818 <TIM_OC1_SetConfig+0xf0>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC1_SetConfig+0x70>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a22      	ldr	r2, [pc, #136]	; (800581c <TIM_OC1_SetConfig+0xf4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d10c      	bne.n	80057b2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0308 	bic.w	r3, r3, #8
 800579e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 0304 	bic.w	r3, r3, #4
 80057b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a17      	ldr	r2, [pc, #92]	; (8005814 <TIM_OC1_SetConfig+0xec>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <TIM_OC1_SetConfig+0xa2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a16      	ldr	r2, [pc, #88]	; (8005818 <TIM_OC1_SetConfig+0xf0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d003      	beq.n	80057ca <TIM_OC1_SetConfig+0xa2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a15      	ldr	r2, [pc, #84]	; (800581c <TIM_OC1_SetConfig+0xf4>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d111      	bne.n	80057ee <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	621a      	str	r2, [r3, #32]
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40014000 	.word	0x40014000
 800581c:	40014400 	.word	0x40014400

08005820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f023 0210 	bic.w	r2, r3, #16
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800584e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800585a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0320 	bic.w	r3, r3, #32
 800586e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a22      	ldr	r2, [pc, #136]	; (8005908 <TIM_OC2_SetConfig+0xe8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d10d      	bne.n	80058a0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800588a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800589e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a19      	ldr	r2, [pc, #100]	; (8005908 <TIM_OC2_SetConfig+0xe8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_OC2_SetConfig+0x98>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a18      	ldr	r2, [pc, #96]	; (800590c <TIM_OC2_SetConfig+0xec>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC2_SetConfig+0x98>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a17      	ldr	r2, [pc, #92]	; (8005910 <TIM_OC2_SetConfig+0xf0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d113      	bne.n	80058e0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40012c00 	.word	0x40012c00
 800590c:	40014000 	.word	0x40014000
 8005910:	40014400 	.word	0x40014400

08005914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <TIM_OC3_SetConfig+0xe4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10d      	bne.n	8005992 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800597c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <TIM_OC3_SetConfig+0xe4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <TIM_OC3_SetConfig+0x96>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a17      	ldr	r2, [pc, #92]	; (80059fc <TIM_OC3_SetConfig+0xe8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_OC3_SetConfig+0x96>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <TIM_OC3_SetConfig+0xec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d113      	bne.n	80059d2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	621a      	str	r2, [r3, #32]
}
 80059ec:	bf00      	nop
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40014000 	.word	0x40014000
 8005a00:	40014400 	.word	0x40014400

08005a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b087      	sub	sp, #28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	031b      	lsls	r3, r3, #12
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <TIM_OC4_SetConfig+0xb0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_OC4_SetConfig+0x74>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <TIM_OC4_SetConfig+0xb4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC4_SetConfig+0x74>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a12      	ldr	r2, [pc, #72]	; (8005abc <TIM_OC4_SetConfig+0xb8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d109      	bne.n	8005a8c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	019b      	lsls	r3, r3, #6
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	621a      	str	r2, [r3, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40014400 	.word	0x40014400

08005ac0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a13      	ldr	r2, [pc, #76]	; (8005b64 <TIM_OC5_SetConfig+0xa4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d007      	beq.n	8005b2a <TIM_OC5_SetConfig+0x6a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a12      	ldr	r2, [pc, #72]	; (8005b68 <TIM_OC5_SetConfig+0xa8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d003      	beq.n	8005b2a <TIM_OC5_SetConfig+0x6a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a11      	ldr	r2, [pc, #68]	; (8005b6c <TIM_OC5_SetConfig+0xac>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d109      	bne.n	8005b3e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400

08005b70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	051b      	lsls	r3, r3, #20
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a14      	ldr	r2, [pc, #80]	; (8005c18 <TIM_OC6_SetConfig+0xa8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d007      	beq.n	8005bdc <TIM_OC6_SetConfig+0x6c>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <TIM_OC6_SetConfig+0xac>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC6_SetConfig+0x6c>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a12      	ldr	r2, [pc, #72]	; (8005c20 <TIM_OC6_SetConfig+0xb0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d109      	bne.n	8005bf0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	029b      	lsls	r3, r3, #10
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	621a      	str	r2, [r3, #32]
}
 8005c0a:	bf00      	nop
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40014400 	.word	0x40014400

08005c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2201      	movs	r2, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	43db      	mvns	r3, r3
 8005c46:	401a      	ands	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e04f      	b.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a21      	ldr	r2, [pc, #132]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d009      	beq.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf0:	d004      	beq.n	8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a10      	ldr	r2, [pc, #64]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d10c      	bne.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40014000 	.word	0x40014000

08005d3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e060      	b.n	8005e1a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	041b      	lsls	r3, r3, #16
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d115      	bne.n	8005e08 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	051b      	lsls	r3, r3, #20
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40012c00 	.word	0x40012c00

08005e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <__errno>:
 8005e68:	4b01      	ldr	r3, [pc, #4]	; (8005e70 <__errno+0x8>)
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	2000000c 	.word	0x2000000c

08005e74 <__libc_init_array>:
 8005e74:	b570      	push	{r4, r5, r6, lr}
 8005e76:	4d0d      	ldr	r5, [pc, #52]	; (8005eac <__libc_init_array+0x38>)
 8005e78:	4c0d      	ldr	r4, [pc, #52]	; (8005eb0 <__libc_init_array+0x3c>)
 8005e7a:	1b64      	subs	r4, r4, r5
 8005e7c:	10a4      	asrs	r4, r4, #2
 8005e7e:	2600      	movs	r6, #0
 8005e80:	42a6      	cmp	r6, r4
 8005e82:	d109      	bne.n	8005e98 <__libc_init_array+0x24>
 8005e84:	4d0b      	ldr	r5, [pc, #44]	; (8005eb4 <__libc_init_array+0x40>)
 8005e86:	4c0c      	ldr	r4, [pc, #48]	; (8005eb8 <__libc_init_array+0x44>)
 8005e88:	f001 f978 	bl	800717c <_init>
 8005e8c:	1b64      	subs	r4, r4, r5
 8005e8e:	10a4      	asrs	r4, r4, #2
 8005e90:	2600      	movs	r6, #0
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d105      	bne.n	8005ea2 <__libc_init_array+0x2e>
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e9c:	4798      	blx	r3
 8005e9e:	3601      	adds	r6, #1
 8005ea0:	e7ee      	b.n	8005e80 <__libc_init_array+0xc>
 8005ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ea6:	4798      	blx	r3
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	e7f2      	b.n	8005e92 <__libc_init_array+0x1e>
 8005eac:	080073b0 	.word	0x080073b0
 8005eb0:	080073b0 	.word	0x080073b0
 8005eb4:	080073b0 	.word	0x080073b0
 8005eb8:	080073b4 	.word	0x080073b4

08005ebc <malloc>:
 8005ebc:	4b02      	ldr	r3, [pc, #8]	; (8005ec8 <malloc+0xc>)
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	6818      	ldr	r0, [r3, #0]
 8005ec2:	f000 b82b 	b.w	8005f1c <_malloc_r>
 8005ec6:	bf00      	nop
 8005ec8:	2000000c 	.word	0x2000000c

08005ecc <memset>:
 8005ecc:	4402      	add	r2, r0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d100      	bne.n	8005ed6 <memset+0xa>
 8005ed4:	4770      	bx	lr
 8005ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eda:	e7f9      	b.n	8005ed0 <memset+0x4>

08005edc <sbrk_aligned>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	4e0e      	ldr	r6, [pc, #56]	; (8005f18 <sbrk_aligned+0x3c>)
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	6831      	ldr	r1, [r6, #0]
 8005ee4:	4605      	mov	r5, r0
 8005ee6:	b911      	cbnz	r1, 8005eee <sbrk_aligned+0x12>
 8005ee8:	f000 f88c 	bl	8006004 <_sbrk_r>
 8005eec:	6030      	str	r0, [r6, #0]
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f000 f887 	bl	8006004 <_sbrk_r>
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	d00a      	beq.n	8005f10 <sbrk_aligned+0x34>
 8005efa:	1cc4      	adds	r4, r0, #3
 8005efc:	f024 0403 	bic.w	r4, r4, #3
 8005f00:	42a0      	cmp	r0, r4
 8005f02:	d007      	beq.n	8005f14 <sbrk_aligned+0x38>
 8005f04:	1a21      	subs	r1, r4, r0
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 f87c 	bl	8006004 <_sbrk_r>
 8005f0c:	3001      	adds	r0, #1
 8005f0e:	d101      	bne.n	8005f14 <sbrk_aligned+0x38>
 8005f10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005f14:	4620      	mov	r0, r4
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	2000022c 	.word	0x2000022c

08005f1c <_malloc_r>:
 8005f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f20:	1ccd      	adds	r5, r1, #3
 8005f22:	f025 0503 	bic.w	r5, r5, #3
 8005f26:	3508      	adds	r5, #8
 8005f28:	2d0c      	cmp	r5, #12
 8005f2a:	bf38      	it	cc
 8005f2c:	250c      	movcc	r5, #12
 8005f2e:	2d00      	cmp	r5, #0
 8005f30:	4607      	mov	r7, r0
 8005f32:	db01      	blt.n	8005f38 <_malloc_r+0x1c>
 8005f34:	42a9      	cmp	r1, r5
 8005f36:	d905      	bls.n	8005f44 <_malloc_r+0x28>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	2600      	movs	r6, #0
 8005f3e:	4630      	mov	r0, r6
 8005f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f44:	4e2e      	ldr	r6, [pc, #184]	; (8006000 <_malloc_r+0xe4>)
 8005f46:	f000 f86d 	bl	8006024 <__malloc_lock>
 8005f4a:	6833      	ldr	r3, [r6, #0]
 8005f4c:	461c      	mov	r4, r3
 8005f4e:	bb34      	cbnz	r4, 8005f9e <_malloc_r+0x82>
 8005f50:	4629      	mov	r1, r5
 8005f52:	4638      	mov	r0, r7
 8005f54:	f7ff ffc2 	bl	8005edc <sbrk_aligned>
 8005f58:	1c43      	adds	r3, r0, #1
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	d14d      	bne.n	8005ffa <_malloc_r+0xde>
 8005f5e:	6834      	ldr	r4, [r6, #0]
 8005f60:	4626      	mov	r6, r4
 8005f62:	2e00      	cmp	r6, #0
 8005f64:	d140      	bne.n	8005fe8 <_malloc_r+0xcc>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	eb04 0803 	add.w	r8, r4, r3
 8005f70:	f000 f848 	bl	8006004 <_sbrk_r>
 8005f74:	4580      	cmp	r8, r0
 8005f76:	d13a      	bne.n	8005fee <_malloc_r+0xd2>
 8005f78:	6821      	ldr	r1, [r4, #0]
 8005f7a:	3503      	adds	r5, #3
 8005f7c:	1a6d      	subs	r5, r5, r1
 8005f7e:	f025 0503 	bic.w	r5, r5, #3
 8005f82:	3508      	adds	r5, #8
 8005f84:	2d0c      	cmp	r5, #12
 8005f86:	bf38      	it	cc
 8005f88:	250c      	movcc	r5, #12
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f7ff ffa5 	bl	8005edc <sbrk_aligned>
 8005f92:	3001      	adds	r0, #1
 8005f94:	d02b      	beq.n	8005fee <_malloc_r+0xd2>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	442b      	add	r3, r5
 8005f9a:	6023      	str	r3, [r4, #0]
 8005f9c:	e00e      	b.n	8005fbc <_malloc_r+0xa0>
 8005f9e:	6822      	ldr	r2, [r4, #0]
 8005fa0:	1b52      	subs	r2, r2, r5
 8005fa2:	d41e      	bmi.n	8005fe2 <_malloc_r+0xc6>
 8005fa4:	2a0b      	cmp	r2, #11
 8005fa6:	d916      	bls.n	8005fd6 <_malloc_r+0xba>
 8005fa8:	1961      	adds	r1, r4, r5
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	6025      	str	r5, [r4, #0]
 8005fae:	bf18      	it	ne
 8005fb0:	6059      	strne	r1, [r3, #4]
 8005fb2:	6863      	ldr	r3, [r4, #4]
 8005fb4:	bf08      	it	eq
 8005fb6:	6031      	streq	r1, [r6, #0]
 8005fb8:	5162      	str	r2, [r4, r5]
 8005fba:	604b      	str	r3, [r1, #4]
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f104 060b 	add.w	r6, r4, #11
 8005fc2:	f000 f835 	bl	8006030 <__malloc_unlock>
 8005fc6:	f026 0607 	bic.w	r6, r6, #7
 8005fca:	1d23      	adds	r3, r4, #4
 8005fcc:	1af2      	subs	r2, r6, r3
 8005fce:	d0b6      	beq.n	8005f3e <_malloc_r+0x22>
 8005fd0:	1b9b      	subs	r3, r3, r6
 8005fd2:	50a3      	str	r3, [r4, r2]
 8005fd4:	e7b3      	b.n	8005f3e <_malloc_r+0x22>
 8005fd6:	6862      	ldr	r2, [r4, #4]
 8005fd8:	42a3      	cmp	r3, r4
 8005fda:	bf0c      	ite	eq
 8005fdc:	6032      	streq	r2, [r6, #0]
 8005fde:	605a      	strne	r2, [r3, #4]
 8005fe0:	e7ec      	b.n	8005fbc <_malloc_r+0xa0>
 8005fe2:	4623      	mov	r3, r4
 8005fe4:	6864      	ldr	r4, [r4, #4]
 8005fe6:	e7b2      	b.n	8005f4e <_malloc_r+0x32>
 8005fe8:	4634      	mov	r4, r6
 8005fea:	6876      	ldr	r6, [r6, #4]
 8005fec:	e7b9      	b.n	8005f62 <_malloc_r+0x46>
 8005fee:	230c      	movs	r3, #12
 8005ff0:	603b      	str	r3, [r7, #0]
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f000 f81c 	bl	8006030 <__malloc_unlock>
 8005ff8:	e7a1      	b.n	8005f3e <_malloc_r+0x22>
 8005ffa:	6025      	str	r5, [r4, #0]
 8005ffc:	e7de      	b.n	8005fbc <_malloc_r+0xa0>
 8005ffe:	bf00      	nop
 8006000:	20000228 	.word	0x20000228

08006004 <_sbrk_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4d06      	ldr	r5, [pc, #24]	; (8006020 <_sbrk_r+0x1c>)
 8006008:	2300      	movs	r3, #0
 800600a:	4604      	mov	r4, r0
 800600c:	4608      	mov	r0, r1
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	f7fb fdee 	bl	8001bf0 <_sbrk>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_sbrk_r+0x1a>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_sbrk_r+0x1a>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	20000230 	.word	0x20000230

08006024 <__malloc_lock>:
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <__malloc_lock+0x8>)
 8006026:	f000 b809 	b.w	800603c <__retarget_lock_acquire_recursive>
 800602a:	bf00      	nop
 800602c:	20000234 	.word	0x20000234

08006030 <__malloc_unlock>:
 8006030:	4801      	ldr	r0, [pc, #4]	; (8006038 <__malloc_unlock+0x8>)
 8006032:	f000 b804 	b.w	800603e <__retarget_lock_release_recursive>
 8006036:	bf00      	nop
 8006038:	20000234 	.word	0x20000234

0800603c <__retarget_lock_acquire_recursive>:
 800603c:	4770      	bx	lr

0800603e <__retarget_lock_release_recursive>:
 800603e:	4770      	bx	lr

08006040 <cos>:
 8006040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006042:	ec53 2b10 	vmov	r2, r3, d0
 8006046:	4826      	ldr	r0, [pc, #152]	; (80060e0 <cos+0xa0>)
 8006048:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800604c:	4281      	cmp	r1, r0
 800604e:	dc06      	bgt.n	800605e <cos+0x1e>
 8006050:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80060d8 <cos+0x98>
 8006054:	b005      	add	sp, #20
 8006056:	f85d eb04 	ldr.w	lr, [sp], #4
 800605a:	f000 baa9 	b.w	80065b0 <__kernel_cos>
 800605e:	4821      	ldr	r0, [pc, #132]	; (80060e4 <cos+0xa4>)
 8006060:	4281      	cmp	r1, r0
 8006062:	dd09      	ble.n	8006078 <cos+0x38>
 8006064:	ee10 0a10 	vmov	r0, s0
 8006068:	4619      	mov	r1, r3
 800606a:	f7fa f8b5 	bl	80001d8 <__aeabi_dsub>
 800606e:	ec41 0b10 	vmov	d0, r0, r1
 8006072:	b005      	add	sp, #20
 8006074:	f85d fb04 	ldr.w	pc, [sp], #4
 8006078:	4668      	mov	r0, sp
 800607a:	f000 f88d 	bl	8006198 <__ieee754_rem_pio2>
 800607e:	f000 0003 	and.w	r0, r0, #3
 8006082:	2801      	cmp	r0, #1
 8006084:	d00b      	beq.n	800609e <cos+0x5e>
 8006086:	2802      	cmp	r0, #2
 8006088:	d016      	beq.n	80060b8 <cos+0x78>
 800608a:	b9e0      	cbnz	r0, 80060c6 <cos+0x86>
 800608c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006090:	ed9d 0b00 	vldr	d0, [sp]
 8006094:	f000 fa8c 	bl	80065b0 <__kernel_cos>
 8006098:	ec51 0b10 	vmov	r0, r1, d0
 800609c:	e7e7      	b.n	800606e <cos+0x2e>
 800609e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060a2:	ed9d 0b00 	vldr	d0, [sp]
 80060a6:	f000 fe9b 	bl	8006de0 <__kernel_sin>
 80060aa:	ec53 2b10 	vmov	r2, r3, d0
 80060ae:	ee10 0a10 	vmov	r0, s0
 80060b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80060b6:	e7da      	b.n	800606e <cos+0x2e>
 80060b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060bc:	ed9d 0b00 	vldr	d0, [sp]
 80060c0:	f000 fa76 	bl	80065b0 <__kernel_cos>
 80060c4:	e7f1      	b.n	80060aa <cos+0x6a>
 80060c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060ca:	ed9d 0b00 	vldr	d0, [sp]
 80060ce:	2001      	movs	r0, #1
 80060d0:	f000 fe86 	bl	8006de0 <__kernel_sin>
 80060d4:	e7e0      	b.n	8006098 <cos+0x58>
 80060d6:	bf00      	nop
	...
 80060e0:	3fe921fb 	.word	0x3fe921fb
 80060e4:	7fefffff 	.word	0x7fefffff

080060e8 <sin>:
 80060e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060ea:	ec53 2b10 	vmov	r2, r3, d0
 80060ee:	4828      	ldr	r0, [pc, #160]	; (8006190 <sin+0xa8>)
 80060f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80060f4:	4281      	cmp	r1, r0
 80060f6:	dc07      	bgt.n	8006108 <sin+0x20>
 80060f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006188 <sin+0xa0>
 80060fc:	2000      	movs	r0, #0
 80060fe:	b005      	add	sp, #20
 8006100:	f85d eb04 	ldr.w	lr, [sp], #4
 8006104:	f000 be6c 	b.w	8006de0 <__kernel_sin>
 8006108:	4822      	ldr	r0, [pc, #136]	; (8006194 <sin+0xac>)
 800610a:	4281      	cmp	r1, r0
 800610c:	dd09      	ble.n	8006122 <sin+0x3a>
 800610e:	ee10 0a10 	vmov	r0, s0
 8006112:	4619      	mov	r1, r3
 8006114:	f7fa f860 	bl	80001d8 <__aeabi_dsub>
 8006118:	ec41 0b10 	vmov	d0, r0, r1
 800611c:	b005      	add	sp, #20
 800611e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006122:	4668      	mov	r0, sp
 8006124:	f000 f838 	bl	8006198 <__ieee754_rem_pio2>
 8006128:	f000 0003 	and.w	r0, r0, #3
 800612c:	2801      	cmp	r0, #1
 800612e:	d00c      	beq.n	800614a <sin+0x62>
 8006130:	2802      	cmp	r0, #2
 8006132:	d011      	beq.n	8006158 <sin+0x70>
 8006134:	b9f0      	cbnz	r0, 8006174 <sin+0x8c>
 8006136:	ed9d 1b02 	vldr	d1, [sp, #8]
 800613a:	ed9d 0b00 	vldr	d0, [sp]
 800613e:	2001      	movs	r0, #1
 8006140:	f000 fe4e 	bl	8006de0 <__kernel_sin>
 8006144:	ec51 0b10 	vmov	r0, r1, d0
 8006148:	e7e6      	b.n	8006118 <sin+0x30>
 800614a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800614e:	ed9d 0b00 	vldr	d0, [sp]
 8006152:	f000 fa2d 	bl	80065b0 <__kernel_cos>
 8006156:	e7f5      	b.n	8006144 <sin+0x5c>
 8006158:	ed9d 1b02 	vldr	d1, [sp, #8]
 800615c:	ed9d 0b00 	vldr	d0, [sp]
 8006160:	2001      	movs	r0, #1
 8006162:	f000 fe3d 	bl	8006de0 <__kernel_sin>
 8006166:	ec53 2b10 	vmov	r2, r3, d0
 800616a:	ee10 0a10 	vmov	r0, s0
 800616e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006172:	e7d1      	b.n	8006118 <sin+0x30>
 8006174:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006178:	ed9d 0b00 	vldr	d0, [sp]
 800617c:	f000 fa18 	bl	80065b0 <__kernel_cos>
 8006180:	e7f1      	b.n	8006166 <sin+0x7e>
 8006182:	bf00      	nop
 8006184:	f3af 8000 	nop.w
	...
 8006190:	3fe921fb 	.word	0x3fe921fb
 8006194:	7fefffff 	.word	0x7fefffff

08006198 <__ieee754_rem_pio2>:
 8006198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800619c:	ed2d 8b02 	vpush	{d8}
 80061a0:	ec55 4b10 	vmov	r4, r5, d0
 80061a4:	4bca      	ldr	r3, [pc, #808]	; (80064d0 <__ieee754_rem_pio2+0x338>)
 80061a6:	b08b      	sub	sp, #44	; 0x2c
 80061a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80061ac:	4598      	cmp	r8, r3
 80061ae:	4682      	mov	sl, r0
 80061b0:	9502      	str	r5, [sp, #8]
 80061b2:	dc08      	bgt.n	80061c6 <__ieee754_rem_pio2+0x2e>
 80061b4:	2200      	movs	r2, #0
 80061b6:	2300      	movs	r3, #0
 80061b8:	ed80 0b00 	vstr	d0, [r0]
 80061bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80061c0:	f04f 0b00 	mov.w	fp, #0
 80061c4:	e028      	b.n	8006218 <__ieee754_rem_pio2+0x80>
 80061c6:	4bc3      	ldr	r3, [pc, #780]	; (80064d4 <__ieee754_rem_pio2+0x33c>)
 80061c8:	4598      	cmp	r8, r3
 80061ca:	dc78      	bgt.n	80062be <__ieee754_rem_pio2+0x126>
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	4ec2      	ldr	r6, [pc, #776]	; (80064d8 <__ieee754_rem_pio2+0x340>)
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	ee10 0a10 	vmov	r0, s0
 80061d6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006498 <__ieee754_rem_pio2+0x300>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	4629      	mov	r1, r5
 80061de:	dd39      	ble.n	8006254 <__ieee754_rem_pio2+0xbc>
 80061e0:	f7f9 fffa 	bl	80001d8 <__aeabi_dsub>
 80061e4:	45b0      	cmp	r8, r6
 80061e6:	4604      	mov	r4, r0
 80061e8:	460d      	mov	r5, r1
 80061ea:	d01b      	beq.n	8006224 <__ieee754_rem_pio2+0x8c>
 80061ec:	a3ac      	add	r3, pc, #688	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x308>)
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f7f9 fff1 	bl	80001d8 <__aeabi_dsub>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	e9ca 2300 	strd	r2, r3, [sl]
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	f7f9 ffe9 	bl	80001d8 <__aeabi_dsub>
 8006206:	a3a6      	add	r3, pc, #664	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x308>)
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f7f9 ffe4 	bl	80001d8 <__aeabi_dsub>
 8006210:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006214:	f04f 0b01 	mov.w	fp, #1
 8006218:	4658      	mov	r0, fp
 800621a:	b00b      	add	sp, #44	; 0x2c
 800621c:	ecbd 8b02 	vpop	{d8}
 8006220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006224:	a3a0      	add	r3, pc, #640	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x310>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7f9 ffd5 	bl	80001d8 <__aeabi_dsub>
 800622e:	a3a0      	add	r3, pc, #640	; (adr r3, 80064b0 <__ieee754_rem_pio2+0x318>)
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	4604      	mov	r4, r0
 8006236:	460d      	mov	r5, r1
 8006238:	f7f9 ffce 	bl	80001d8 <__aeabi_dsub>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	e9ca 2300 	strd	r2, r3, [sl]
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7f9 ffc6 	bl	80001d8 <__aeabi_dsub>
 800624c:	a398      	add	r3, pc, #608	; (adr r3, 80064b0 <__ieee754_rem_pio2+0x318>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	e7db      	b.n	800620c <__ieee754_rem_pio2+0x74>
 8006254:	f7f9 ffc2 	bl	80001dc <__adddf3>
 8006258:	45b0      	cmp	r8, r6
 800625a:	4604      	mov	r4, r0
 800625c:	460d      	mov	r5, r1
 800625e:	d016      	beq.n	800628e <__ieee754_rem_pio2+0xf6>
 8006260:	a38f      	add	r3, pc, #572	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x308>)
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	f7f9 ffb9 	bl	80001dc <__adddf3>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	e9ca 2300 	strd	r2, r3, [sl]
 8006272:	4620      	mov	r0, r4
 8006274:	4629      	mov	r1, r5
 8006276:	f7f9 ffaf 	bl	80001d8 <__aeabi_dsub>
 800627a:	a389      	add	r3, pc, #548	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x308>)
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f7f9 ffac 	bl	80001dc <__adddf3>
 8006284:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006288:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800628c:	e7c4      	b.n	8006218 <__ieee754_rem_pio2+0x80>
 800628e:	a386      	add	r3, pc, #536	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x310>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f7f9 ffa2 	bl	80001dc <__adddf3>
 8006298:	a385      	add	r3, pc, #532	; (adr r3, 80064b0 <__ieee754_rem_pio2+0x318>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	4604      	mov	r4, r0
 80062a0:	460d      	mov	r5, r1
 80062a2:	f7f9 ff9b 	bl	80001dc <__adddf3>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	e9ca 2300 	strd	r2, r3, [sl]
 80062ae:	4620      	mov	r0, r4
 80062b0:	4629      	mov	r1, r5
 80062b2:	f7f9 ff91 	bl	80001d8 <__aeabi_dsub>
 80062b6:	a37e      	add	r3, pc, #504	; (adr r3, 80064b0 <__ieee754_rem_pio2+0x318>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	e7e0      	b.n	8006280 <__ieee754_rem_pio2+0xe8>
 80062be:	4b87      	ldr	r3, [pc, #540]	; (80064dc <__ieee754_rem_pio2+0x344>)
 80062c0:	4598      	cmp	r8, r3
 80062c2:	f300 80d9 	bgt.w	8006478 <__ieee754_rem_pio2+0x2e0>
 80062c6:	f000 fe49 	bl	8006f5c <fabs>
 80062ca:	ec55 4b10 	vmov	r4, r5, d0
 80062ce:	ee10 0a10 	vmov	r0, s0
 80062d2:	a379      	add	r3, pc, #484	; (adr r3, 80064b8 <__ieee754_rem_pio2+0x320>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	4629      	mov	r1, r5
 80062da:	f7fa f935 	bl	8000548 <__aeabi_dmul>
 80062de:	4b80      	ldr	r3, [pc, #512]	; (80064e0 <__ieee754_rem_pio2+0x348>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	f7f9 ff7b 	bl	80001dc <__adddf3>
 80062e6:	f7fa fbc9 	bl	8000a7c <__aeabi_d2iz>
 80062ea:	4683      	mov	fp, r0
 80062ec:	f7fa f8c2 	bl	8000474 <__aeabi_i2d>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	ec43 2b18 	vmov	d8, r2, r3
 80062f8:	a367      	add	r3, pc, #412	; (adr r3, 8006498 <__ieee754_rem_pio2+0x300>)
 80062fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fe:	f7fa f923 	bl	8000548 <__aeabi_dmul>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4620      	mov	r0, r4
 8006308:	4629      	mov	r1, r5
 800630a:	f7f9 ff65 	bl	80001d8 <__aeabi_dsub>
 800630e:	a364      	add	r3, pc, #400	; (adr r3, 80064a0 <__ieee754_rem_pio2+0x308>)
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	4606      	mov	r6, r0
 8006316:	460f      	mov	r7, r1
 8006318:	ec51 0b18 	vmov	r0, r1, d8
 800631c:	f7fa f914 	bl	8000548 <__aeabi_dmul>
 8006320:	f1bb 0f1f 	cmp.w	fp, #31
 8006324:	4604      	mov	r4, r0
 8006326:	460d      	mov	r5, r1
 8006328:	dc0d      	bgt.n	8006346 <__ieee754_rem_pio2+0x1ae>
 800632a:	4b6e      	ldr	r3, [pc, #440]	; (80064e4 <__ieee754_rem_pio2+0x34c>)
 800632c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8006330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006334:	4543      	cmp	r3, r8
 8006336:	d006      	beq.n	8006346 <__ieee754_rem_pio2+0x1ae>
 8006338:	4622      	mov	r2, r4
 800633a:	462b      	mov	r3, r5
 800633c:	4630      	mov	r0, r6
 800633e:	4639      	mov	r1, r7
 8006340:	f7f9 ff4a 	bl	80001d8 <__aeabi_dsub>
 8006344:	e00f      	b.n	8006366 <__ieee754_rem_pio2+0x1ce>
 8006346:	462b      	mov	r3, r5
 8006348:	4622      	mov	r2, r4
 800634a:	4630      	mov	r0, r6
 800634c:	4639      	mov	r1, r7
 800634e:	f7f9 ff43 	bl	80001d8 <__aeabi_dsub>
 8006352:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800635c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006360:	f1b8 0f10 	cmp.w	r8, #16
 8006364:	dc02      	bgt.n	800636c <__ieee754_rem_pio2+0x1d4>
 8006366:	e9ca 0100 	strd	r0, r1, [sl]
 800636a:	e039      	b.n	80063e0 <__ieee754_rem_pio2+0x248>
 800636c:	a34e      	add	r3, pc, #312	; (adr r3, 80064a8 <__ieee754_rem_pio2+0x310>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	ec51 0b18 	vmov	r0, r1, d8
 8006376:	f7fa f8e7 	bl	8000548 <__aeabi_dmul>
 800637a:	4604      	mov	r4, r0
 800637c:	460d      	mov	r5, r1
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4630      	mov	r0, r6
 8006384:	4639      	mov	r1, r7
 8006386:	f7f9 ff27 	bl	80001d8 <__aeabi_dsub>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4680      	mov	r8, r0
 8006390:	4689      	mov	r9, r1
 8006392:	4630      	mov	r0, r6
 8006394:	4639      	mov	r1, r7
 8006396:	f7f9 ff1f 	bl	80001d8 <__aeabi_dsub>
 800639a:	4622      	mov	r2, r4
 800639c:	462b      	mov	r3, r5
 800639e:	f7f9 ff1b 	bl	80001d8 <__aeabi_dsub>
 80063a2:	a343      	add	r3, pc, #268	; (adr r3, 80064b0 <__ieee754_rem_pio2+0x318>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	4604      	mov	r4, r0
 80063aa:	460d      	mov	r5, r1
 80063ac:	ec51 0b18 	vmov	r0, r1, d8
 80063b0:	f7fa f8ca 	bl	8000548 <__aeabi_dmul>
 80063b4:	4622      	mov	r2, r4
 80063b6:	462b      	mov	r3, r5
 80063b8:	f7f9 ff0e 	bl	80001d8 <__aeabi_dsub>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4604      	mov	r4, r0
 80063c2:	460d      	mov	r5, r1
 80063c4:	4640      	mov	r0, r8
 80063c6:	4649      	mov	r1, r9
 80063c8:	f7f9 ff06 	bl	80001d8 <__aeabi_dsub>
 80063cc:	9a03      	ldr	r2, [sp, #12]
 80063ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b31      	cmp	r3, #49	; 0x31
 80063d6:	dc24      	bgt.n	8006422 <__ieee754_rem_pio2+0x28a>
 80063d8:	e9ca 0100 	strd	r0, r1, [sl]
 80063dc:	4646      	mov	r6, r8
 80063de:	464f      	mov	r7, r9
 80063e0:	e9da 8900 	ldrd	r8, r9, [sl]
 80063e4:	4630      	mov	r0, r6
 80063e6:	4642      	mov	r2, r8
 80063e8:	464b      	mov	r3, r9
 80063ea:	4639      	mov	r1, r7
 80063ec:	f7f9 fef4 	bl	80001d8 <__aeabi_dsub>
 80063f0:	462b      	mov	r3, r5
 80063f2:	4622      	mov	r2, r4
 80063f4:	f7f9 fef0 	bl	80001d8 <__aeabi_dsub>
 80063f8:	9b02      	ldr	r3, [sp, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006400:	f6bf af0a 	bge.w	8006218 <__ieee754_rem_pio2+0x80>
 8006404:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006408:	f8ca 3004 	str.w	r3, [sl, #4]
 800640c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006410:	f8ca 8000 	str.w	r8, [sl]
 8006414:	f8ca 0008 	str.w	r0, [sl, #8]
 8006418:	f8ca 300c 	str.w	r3, [sl, #12]
 800641c:	f1cb 0b00 	rsb	fp, fp, #0
 8006420:	e6fa      	b.n	8006218 <__ieee754_rem_pio2+0x80>
 8006422:	a327      	add	r3, pc, #156	; (adr r3, 80064c0 <__ieee754_rem_pio2+0x328>)
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	ec51 0b18 	vmov	r0, r1, d8
 800642c:	f7fa f88c 	bl	8000548 <__aeabi_dmul>
 8006430:	4604      	mov	r4, r0
 8006432:	460d      	mov	r5, r1
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7f9 fecc 	bl	80001d8 <__aeabi_dsub>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4606      	mov	r6, r0
 8006446:	460f      	mov	r7, r1
 8006448:	4640      	mov	r0, r8
 800644a:	4649      	mov	r1, r9
 800644c:	f7f9 fec4 	bl	80001d8 <__aeabi_dsub>
 8006450:	4622      	mov	r2, r4
 8006452:	462b      	mov	r3, r5
 8006454:	f7f9 fec0 	bl	80001d8 <__aeabi_dsub>
 8006458:	a31b      	add	r3, pc, #108	; (adr r3, 80064c8 <__ieee754_rem_pio2+0x330>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	4604      	mov	r4, r0
 8006460:	460d      	mov	r5, r1
 8006462:	ec51 0b18 	vmov	r0, r1, d8
 8006466:	f7fa f86f 	bl	8000548 <__aeabi_dmul>
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	f7f9 feb3 	bl	80001d8 <__aeabi_dsub>
 8006472:	4604      	mov	r4, r0
 8006474:	460d      	mov	r5, r1
 8006476:	e75f      	b.n	8006338 <__ieee754_rem_pio2+0x1a0>
 8006478:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <__ieee754_rem_pio2+0x350>)
 800647a:	4598      	cmp	r8, r3
 800647c:	dd36      	ble.n	80064ec <__ieee754_rem_pio2+0x354>
 800647e:	ee10 2a10 	vmov	r2, s0
 8006482:	462b      	mov	r3, r5
 8006484:	4620      	mov	r0, r4
 8006486:	4629      	mov	r1, r5
 8006488:	f7f9 fea6 	bl	80001d8 <__aeabi_dsub>
 800648c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006490:	e9ca 0100 	strd	r0, r1, [sl]
 8006494:	e694      	b.n	80061c0 <__ieee754_rem_pio2+0x28>
 8006496:	bf00      	nop
 8006498:	54400000 	.word	0x54400000
 800649c:	3ff921fb 	.word	0x3ff921fb
 80064a0:	1a626331 	.word	0x1a626331
 80064a4:	3dd0b461 	.word	0x3dd0b461
 80064a8:	1a600000 	.word	0x1a600000
 80064ac:	3dd0b461 	.word	0x3dd0b461
 80064b0:	2e037073 	.word	0x2e037073
 80064b4:	3ba3198a 	.word	0x3ba3198a
 80064b8:	6dc9c883 	.word	0x6dc9c883
 80064bc:	3fe45f30 	.word	0x3fe45f30
 80064c0:	2e000000 	.word	0x2e000000
 80064c4:	3ba3198a 	.word	0x3ba3198a
 80064c8:	252049c1 	.word	0x252049c1
 80064cc:	397b839a 	.word	0x397b839a
 80064d0:	3fe921fb 	.word	0x3fe921fb
 80064d4:	4002d97b 	.word	0x4002d97b
 80064d8:	3ff921fb 	.word	0x3ff921fb
 80064dc:	413921fb 	.word	0x413921fb
 80064e0:	3fe00000 	.word	0x3fe00000
 80064e4:	080071d8 	.word	0x080071d8
 80064e8:	7fefffff 	.word	0x7fefffff
 80064ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 80064f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80064f4:	ee10 0a10 	vmov	r0, s0
 80064f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80064fc:	ee10 6a10 	vmov	r6, s0
 8006500:	460f      	mov	r7, r1
 8006502:	f7fa fabb 	bl	8000a7c <__aeabi_d2iz>
 8006506:	f7f9 ffb5 	bl	8000474 <__aeabi_i2d>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4630      	mov	r0, r6
 8006510:	4639      	mov	r1, r7
 8006512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006516:	f7f9 fe5f 	bl	80001d8 <__aeabi_dsub>
 800651a:	4b23      	ldr	r3, [pc, #140]	; (80065a8 <__ieee754_rem_pio2+0x410>)
 800651c:	2200      	movs	r2, #0
 800651e:	f7fa f813 	bl	8000548 <__aeabi_dmul>
 8006522:	460f      	mov	r7, r1
 8006524:	4606      	mov	r6, r0
 8006526:	f7fa faa9 	bl	8000a7c <__aeabi_d2iz>
 800652a:	f7f9 ffa3 	bl	8000474 <__aeabi_i2d>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4630      	mov	r0, r6
 8006534:	4639      	mov	r1, r7
 8006536:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800653a:	f7f9 fe4d 	bl	80001d8 <__aeabi_dsub>
 800653e:	4b1a      	ldr	r3, [pc, #104]	; (80065a8 <__ieee754_rem_pio2+0x410>)
 8006540:	2200      	movs	r2, #0
 8006542:	f7fa f801 	bl	8000548 <__aeabi_dmul>
 8006546:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800654a:	ad04      	add	r5, sp, #16
 800654c:	f04f 0803 	mov.w	r8, #3
 8006550:	46a9      	mov	r9, r5
 8006552:	2600      	movs	r6, #0
 8006554:	2700      	movs	r7, #0
 8006556:	4632      	mov	r2, r6
 8006558:	463b      	mov	r3, r7
 800655a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800655e:	46c3      	mov	fp, r8
 8006560:	3d08      	subs	r5, #8
 8006562:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006566:	f7fa fa57 	bl	8000a18 <__aeabi_dcmpeq>
 800656a:	2800      	cmp	r0, #0
 800656c:	d1f3      	bne.n	8006556 <__ieee754_rem_pio2+0x3be>
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <__ieee754_rem_pio2+0x414>)
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	2302      	movs	r3, #2
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4622      	mov	r2, r4
 8006578:	465b      	mov	r3, fp
 800657a:	4651      	mov	r1, sl
 800657c:	4648      	mov	r0, r9
 800657e:	f000 f8df 	bl	8006740 <__kernel_rem_pio2>
 8006582:	9b02      	ldr	r3, [sp, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	4683      	mov	fp, r0
 8006588:	f6bf ae46 	bge.w	8006218 <__ieee754_rem_pio2+0x80>
 800658c:	e9da 2100 	ldrd	r2, r1, [sl]
 8006590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006594:	e9ca 2300 	strd	r2, r3, [sl]
 8006598:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800659c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065a0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80065a4:	e73a      	b.n	800641c <__ieee754_rem_pio2+0x284>
 80065a6:	bf00      	nop
 80065a8:	41700000 	.word	0x41700000
 80065ac:	08007258 	.word	0x08007258

080065b0 <__kernel_cos>:
 80065b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b4:	ec57 6b10 	vmov	r6, r7, d0
 80065b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80065bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80065c0:	ed8d 1b00 	vstr	d1, [sp]
 80065c4:	da07      	bge.n	80065d6 <__kernel_cos+0x26>
 80065c6:	ee10 0a10 	vmov	r0, s0
 80065ca:	4639      	mov	r1, r7
 80065cc:	f7fa fa56 	bl	8000a7c <__aeabi_d2iz>
 80065d0:	2800      	cmp	r0, #0
 80065d2:	f000 8088 	beq.w	80066e6 <__kernel_cos+0x136>
 80065d6:	4632      	mov	r2, r6
 80065d8:	463b      	mov	r3, r7
 80065da:	4630      	mov	r0, r6
 80065dc:	4639      	mov	r1, r7
 80065de:	f7f9 ffb3 	bl	8000548 <__aeabi_dmul>
 80065e2:	4b51      	ldr	r3, [pc, #324]	; (8006728 <__kernel_cos+0x178>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	4604      	mov	r4, r0
 80065e8:	460d      	mov	r5, r1
 80065ea:	f7f9 ffad 	bl	8000548 <__aeabi_dmul>
 80065ee:	a340      	add	r3, pc, #256	; (adr r3, 80066f0 <__kernel_cos+0x140>)
 80065f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f4:	4682      	mov	sl, r0
 80065f6:	468b      	mov	fp, r1
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	f7f9 ffa4 	bl	8000548 <__aeabi_dmul>
 8006600:	a33d      	add	r3, pc, #244	; (adr r3, 80066f8 <__kernel_cos+0x148>)
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f7f9 fde9 	bl	80001dc <__adddf3>
 800660a:	4622      	mov	r2, r4
 800660c:	462b      	mov	r3, r5
 800660e:	f7f9 ff9b 	bl	8000548 <__aeabi_dmul>
 8006612:	a33b      	add	r3, pc, #236	; (adr r3, 8006700 <__kernel_cos+0x150>)
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f7f9 fdde 	bl	80001d8 <__aeabi_dsub>
 800661c:	4622      	mov	r2, r4
 800661e:	462b      	mov	r3, r5
 8006620:	f7f9 ff92 	bl	8000548 <__aeabi_dmul>
 8006624:	a338      	add	r3, pc, #224	; (adr r3, 8006708 <__kernel_cos+0x158>)
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f7f9 fdd7 	bl	80001dc <__adddf3>
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	f7f9 ff89 	bl	8000548 <__aeabi_dmul>
 8006636:	a336      	add	r3, pc, #216	; (adr r3, 8006710 <__kernel_cos+0x160>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f7f9 fdcc 	bl	80001d8 <__aeabi_dsub>
 8006640:	4622      	mov	r2, r4
 8006642:	462b      	mov	r3, r5
 8006644:	f7f9 ff80 	bl	8000548 <__aeabi_dmul>
 8006648:	a333      	add	r3, pc, #204	; (adr r3, 8006718 <__kernel_cos+0x168>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f7f9 fdc5 	bl	80001dc <__adddf3>
 8006652:	4622      	mov	r2, r4
 8006654:	462b      	mov	r3, r5
 8006656:	f7f9 ff77 	bl	8000548 <__aeabi_dmul>
 800665a:	4622      	mov	r2, r4
 800665c:	462b      	mov	r3, r5
 800665e:	f7f9 ff73 	bl	8000548 <__aeabi_dmul>
 8006662:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006666:	4604      	mov	r4, r0
 8006668:	460d      	mov	r5, r1
 800666a:	4630      	mov	r0, r6
 800666c:	4639      	mov	r1, r7
 800666e:	f7f9 ff6b 	bl	8000548 <__aeabi_dmul>
 8006672:	460b      	mov	r3, r1
 8006674:	4602      	mov	r2, r0
 8006676:	4629      	mov	r1, r5
 8006678:	4620      	mov	r0, r4
 800667a:	f7f9 fdad 	bl	80001d8 <__aeabi_dsub>
 800667e:	4b2b      	ldr	r3, [pc, #172]	; (800672c <__kernel_cos+0x17c>)
 8006680:	4598      	cmp	r8, r3
 8006682:	4606      	mov	r6, r0
 8006684:	460f      	mov	r7, r1
 8006686:	dc10      	bgt.n	80066aa <__kernel_cos+0xfa>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	4650      	mov	r0, sl
 800668e:	4659      	mov	r1, fp
 8006690:	f7f9 fda2 	bl	80001d8 <__aeabi_dsub>
 8006694:	460b      	mov	r3, r1
 8006696:	4926      	ldr	r1, [pc, #152]	; (8006730 <__kernel_cos+0x180>)
 8006698:	4602      	mov	r2, r0
 800669a:	2000      	movs	r0, #0
 800669c:	f7f9 fd9c 	bl	80001d8 <__aeabi_dsub>
 80066a0:	ec41 0b10 	vmov	d0, r0, r1
 80066a4:	b003      	add	sp, #12
 80066a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066aa:	4b22      	ldr	r3, [pc, #136]	; (8006734 <__kernel_cos+0x184>)
 80066ac:	4920      	ldr	r1, [pc, #128]	; (8006730 <__kernel_cos+0x180>)
 80066ae:	4598      	cmp	r8, r3
 80066b0:	bfcc      	ite	gt
 80066b2:	4d21      	ldrgt	r5, [pc, #132]	; (8006738 <__kernel_cos+0x188>)
 80066b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80066b8:	2400      	movs	r4, #0
 80066ba:	4622      	mov	r2, r4
 80066bc:	462b      	mov	r3, r5
 80066be:	2000      	movs	r0, #0
 80066c0:	f7f9 fd8a 	bl	80001d8 <__aeabi_dsub>
 80066c4:	4622      	mov	r2, r4
 80066c6:	4680      	mov	r8, r0
 80066c8:	4689      	mov	r9, r1
 80066ca:	462b      	mov	r3, r5
 80066cc:	4650      	mov	r0, sl
 80066ce:	4659      	mov	r1, fp
 80066d0:	f7f9 fd82 	bl	80001d8 <__aeabi_dsub>
 80066d4:	4632      	mov	r2, r6
 80066d6:	463b      	mov	r3, r7
 80066d8:	f7f9 fd7e 	bl	80001d8 <__aeabi_dsub>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4640      	mov	r0, r8
 80066e2:	4649      	mov	r1, r9
 80066e4:	e7da      	b.n	800669c <__kernel_cos+0xec>
 80066e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006720 <__kernel_cos+0x170>
 80066ea:	e7db      	b.n	80066a4 <__kernel_cos+0xf4>
 80066ec:	f3af 8000 	nop.w
 80066f0:	be8838d4 	.word	0xbe8838d4
 80066f4:	bda8fae9 	.word	0xbda8fae9
 80066f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80066fc:	3e21ee9e 	.word	0x3e21ee9e
 8006700:	809c52ad 	.word	0x809c52ad
 8006704:	3e927e4f 	.word	0x3e927e4f
 8006708:	19cb1590 	.word	0x19cb1590
 800670c:	3efa01a0 	.word	0x3efa01a0
 8006710:	16c15177 	.word	0x16c15177
 8006714:	3f56c16c 	.word	0x3f56c16c
 8006718:	5555554c 	.word	0x5555554c
 800671c:	3fa55555 	.word	0x3fa55555
 8006720:	00000000 	.word	0x00000000
 8006724:	3ff00000 	.word	0x3ff00000
 8006728:	3fe00000 	.word	0x3fe00000
 800672c:	3fd33332 	.word	0x3fd33332
 8006730:	3ff00000 	.word	0x3ff00000
 8006734:	3fe90000 	.word	0x3fe90000
 8006738:	3fd20000 	.word	0x3fd20000
 800673c:	00000000 	.word	0x00000000

08006740 <__kernel_rem_pio2>:
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006744:	ed2d 8b02 	vpush	{d8}
 8006748:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800674c:	f112 0f14 	cmn.w	r2, #20
 8006750:	9308      	str	r3, [sp, #32]
 8006752:	9101      	str	r1, [sp, #4]
 8006754:	4bc4      	ldr	r3, [pc, #784]	; (8006a68 <__kernel_rem_pio2+0x328>)
 8006756:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006758:	900b      	str	r0, [sp, #44]	; 0x2c
 800675a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800675e:	9302      	str	r3, [sp, #8]
 8006760:	9b08      	ldr	r3, [sp, #32]
 8006762:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006766:	bfa8      	it	ge
 8006768:	1ed4      	subge	r4, r2, #3
 800676a:	9306      	str	r3, [sp, #24]
 800676c:	bfb2      	itee	lt
 800676e:	2400      	movlt	r4, #0
 8006770:	2318      	movge	r3, #24
 8006772:	fb94 f4f3 	sdivge	r4, r4, r3
 8006776:	f06f 0317 	mvn.w	r3, #23
 800677a:	fb04 3303 	mla	r3, r4, r3, r3
 800677e:	eb03 0a02 	add.w	sl, r3, r2
 8006782:	9b02      	ldr	r3, [sp, #8]
 8006784:	9a06      	ldr	r2, [sp, #24]
 8006786:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006a58 <__kernel_rem_pio2+0x318>
 800678a:	eb03 0802 	add.w	r8, r3, r2
 800678e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006790:	1aa7      	subs	r7, r4, r2
 8006792:	ae22      	add	r6, sp, #136	; 0x88
 8006794:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006798:	2500      	movs	r5, #0
 800679a:	4545      	cmp	r5, r8
 800679c:	dd13      	ble.n	80067c6 <__kernel_rem_pio2+0x86>
 800679e:	9b08      	ldr	r3, [sp, #32]
 80067a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006a58 <__kernel_rem_pio2+0x318>
 80067a4:	aa22      	add	r2, sp, #136	; 0x88
 80067a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80067aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80067ae:	f04f 0800 	mov.w	r8, #0
 80067b2:	9b02      	ldr	r3, [sp, #8]
 80067b4:	4598      	cmp	r8, r3
 80067b6:	dc2f      	bgt.n	8006818 <__kernel_rem_pio2+0xd8>
 80067b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80067bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80067c0:	462f      	mov	r7, r5
 80067c2:	2600      	movs	r6, #0
 80067c4:	e01b      	b.n	80067fe <__kernel_rem_pio2+0xbe>
 80067c6:	42ef      	cmn	r7, r5
 80067c8:	d407      	bmi.n	80067da <__kernel_rem_pio2+0x9a>
 80067ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80067ce:	f7f9 fe51 	bl	8000474 <__aeabi_i2d>
 80067d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80067d6:	3501      	adds	r5, #1
 80067d8:	e7df      	b.n	800679a <__kernel_rem_pio2+0x5a>
 80067da:	ec51 0b18 	vmov	r0, r1, d8
 80067de:	e7f8      	b.n	80067d2 <__kernel_rem_pio2+0x92>
 80067e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80067e8:	f7f9 feae 	bl	8000548 <__aeabi_dmul>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f4:	f7f9 fcf2 	bl	80001dc <__adddf3>
 80067f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067fc:	3601      	adds	r6, #1
 80067fe:	9b06      	ldr	r3, [sp, #24]
 8006800:	429e      	cmp	r6, r3
 8006802:	f1a7 0708 	sub.w	r7, r7, #8
 8006806:	ddeb      	ble.n	80067e0 <__kernel_rem_pio2+0xa0>
 8006808:	ed9d 7b04 	vldr	d7, [sp, #16]
 800680c:	f108 0801 	add.w	r8, r8, #1
 8006810:	ecab 7b02 	vstmia	fp!, {d7}
 8006814:	3508      	adds	r5, #8
 8006816:	e7cc      	b.n	80067b2 <__kernel_rem_pio2+0x72>
 8006818:	9b02      	ldr	r3, [sp, #8]
 800681a:	aa0e      	add	r2, sp, #56	; 0x38
 800681c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006820:	930d      	str	r3, [sp, #52]	; 0x34
 8006822:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006824:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006828:	9c02      	ldr	r4, [sp, #8]
 800682a:	930c      	str	r3, [sp, #48]	; 0x30
 800682c:	00e3      	lsls	r3, r4, #3
 800682e:	930a      	str	r3, [sp, #40]	; 0x28
 8006830:	ab9a      	add	r3, sp, #616	; 0x268
 8006832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006836:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800683a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800683e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006840:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006844:	46c3      	mov	fp, r8
 8006846:	46a1      	mov	r9, r4
 8006848:	f1b9 0f00 	cmp.w	r9, #0
 800684c:	f1a5 0508 	sub.w	r5, r5, #8
 8006850:	dc77      	bgt.n	8006942 <__kernel_rem_pio2+0x202>
 8006852:	ec47 6b10 	vmov	d0, r6, r7
 8006856:	4650      	mov	r0, sl
 8006858:	f000 fc0a 	bl	8007070 <scalbn>
 800685c:	ec57 6b10 	vmov	r6, r7, d0
 8006860:	2200      	movs	r2, #0
 8006862:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006866:	ee10 0a10 	vmov	r0, s0
 800686a:	4639      	mov	r1, r7
 800686c:	f7f9 fe6c 	bl	8000548 <__aeabi_dmul>
 8006870:	ec41 0b10 	vmov	d0, r0, r1
 8006874:	f000 fb7c 	bl	8006f70 <floor>
 8006878:	4b7c      	ldr	r3, [pc, #496]	; (8006a6c <__kernel_rem_pio2+0x32c>)
 800687a:	ec51 0b10 	vmov	r0, r1, d0
 800687e:	2200      	movs	r2, #0
 8006880:	f7f9 fe62 	bl	8000548 <__aeabi_dmul>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	f7f9 fca4 	bl	80001d8 <__aeabi_dsub>
 8006890:	460f      	mov	r7, r1
 8006892:	4606      	mov	r6, r0
 8006894:	f7fa f8f2 	bl	8000a7c <__aeabi_d2iz>
 8006898:	9004      	str	r0, [sp, #16]
 800689a:	f7f9 fdeb 	bl	8000474 <__aeabi_i2d>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4630      	mov	r0, r6
 80068a4:	4639      	mov	r1, r7
 80068a6:	f7f9 fc97 	bl	80001d8 <__aeabi_dsub>
 80068aa:	f1ba 0f00 	cmp.w	sl, #0
 80068ae:	4606      	mov	r6, r0
 80068b0:	460f      	mov	r7, r1
 80068b2:	dd6d      	ble.n	8006990 <__kernel_rem_pio2+0x250>
 80068b4:	1e62      	subs	r2, r4, #1
 80068b6:	ab0e      	add	r3, sp, #56	; 0x38
 80068b8:	9d04      	ldr	r5, [sp, #16]
 80068ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80068be:	f1ca 0118 	rsb	r1, sl, #24
 80068c2:	fa40 f301 	asr.w	r3, r0, r1
 80068c6:	441d      	add	r5, r3
 80068c8:	408b      	lsls	r3, r1
 80068ca:	1ac0      	subs	r0, r0, r3
 80068cc:	ab0e      	add	r3, sp, #56	; 0x38
 80068ce:	9504      	str	r5, [sp, #16]
 80068d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80068d4:	f1ca 0317 	rsb	r3, sl, #23
 80068d8:	fa40 fb03 	asr.w	fp, r0, r3
 80068dc:	f1bb 0f00 	cmp.w	fp, #0
 80068e0:	dd65      	ble.n	80069ae <__kernel_rem_pio2+0x26e>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	2200      	movs	r2, #0
 80068e6:	3301      	adds	r3, #1
 80068e8:	9304      	str	r3, [sp, #16]
 80068ea:	4615      	mov	r5, r2
 80068ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80068f0:	4294      	cmp	r4, r2
 80068f2:	f300 809c 	bgt.w	8006a2e <__kernel_rem_pio2+0x2ee>
 80068f6:	f1ba 0f00 	cmp.w	sl, #0
 80068fa:	dd07      	ble.n	800690c <__kernel_rem_pio2+0x1cc>
 80068fc:	f1ba 0f01 	cmp.w	sl, #1
 8006900:	f000 80c0 	beq.w	8006a84 <__kernel_rem_pio2+0x344>
 8006904:	f1ba 0f02 	cmp.w	sl, #2
 8006908:	f000 80c6 	beq.w	8006a98 <__kernel_rem_pio2+0x358>
 800690c:	f1bb 0f02 	cmp.w	fp, #2
 8006910:	d14d      	bne.n	80069ae <__kernel_rem_pio2+0x26e>
 8006912:	4632      	mov	r2, r6
 8006914:	463b      	mov	r3, r7
 8006916:	4956      	ldr	r1, [pc, #344]	; (8006a70 <__kernel_rem_pio2+0x330>)
 8006918:	2000      	movs	r0, #0
 800691a:	f7f9 fc5d 	bl	80001d8 <__aeabi_dsub>
 800691e:	4606      	mov	r6, r0
 8006920:	460f      	mov	r7, r1
 8006922:	2d00      	cmp	r5, #0
 8006924:	d043      	beq.n	80069ae <__kernel_rem_pio2+0x26e>
 8006926:	4650      	mov	r0, sl
 8006928:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006a60 <__kernel_rem_pio2+0x320>
 800692c:	f000 fba0 	bl	8007070 <scalbn>
 8006930:	4630      	mov	r0, r6
 8006932:	4639      	mov	r1, r7
 8006934:	ec53 2b10 	vmov	r2, r3, d0
 8006938:	f7f9 fc4e 	bl	80001d8 <__aeabi_dsub>
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	e035      	b.n	80069ae <__kernel_rem_pio2+0x26e>
 8006942:	4b4c      	ldr	r3, [pc, #304]	; (8006a74 <__kernel_rem_pio2+0x334>)
 8006944:	2200      	movs	r2, #0
 8006946:	4630      	mov	r0, r6
 8006948:	4639      	mov	r1, r7
 800694a:	f7f9 fdfd 	bl	8000548 <__aeabi_dmul>
 800694e:	f7fa f895 	bl	8000a7c <__aeabi_d2iz>
 8006952:	f7f9 fd8f 	bl	8000474 <__aeabi_i2d>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	ec43 2b18 	vmov	d8, r2, r3
 800695e:	4b46      	ldr	r3, [pc, #280]	; (8006a78 <__kernel_rem_pio2+0x338>)
 8006960:	2200      	movs	r2, #0
 8006962:	f7f9 fdf1 	bl	8000548 <__aeabi_dmul>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4630      	mov	r0, r6
 800696c:	4639      	mov	r1, r7
 800696e:	f7f9 fc33 	bl	80001d8 <__aeabi_dsub>
 8006972:	f7fa f883 	bl	8000a7c <__aeabi_d2iz>
 8006976:	e9d5 2300 	ldrd	r2, r3, [r5]
 800697a:	f84b 0b04 	str.w	r0, [fp], #4
 800697e:	ec51 0b18 	vmov	r0, r1, d8
 8006982:	f7f9 fc2b 	bl	80001dc <__adddf3>
 8006986:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800698a:	4606      	mov	r6, r0
 800698c:	460f      	mov	r7, r1
 800698e:	e75b      	b.n	8006848 <__kernel_rem_pio2+0x108>
 8006990:	d106      	bne.n	80069a0 <__kernel_rem_pio2+0x260>
 8006992:	1e63      	subs	r3, r4, #1
 8006994:	aa0e      	add	r2, sp, #56	; 0x38
 8006996:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800699a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800699e:	e79d      	b.n	80068dc <__kernel_rem_pio2+0x19c>
 80069a0:	4b36      	ldr	r3, [pc, #216]	; (8006a7c <__kernel_rem_pio2+0x33c>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	f7fa f856 	bl	8000a54 <__aeabi_dcmpge>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d13d      	bne.n	8006a28 <__kernel_rem_pio2+0x2e8>
 80069ac:	4683      	mov	fp, r0
 80069ae:	2200      	movs	r2, #0
 80069b0:	2300      	movs	r3, #0
 80069b2:	4630      	mov	r0, r6
 80069b4:	4639      	mov	r1, r7
 80069b6:	f7fa f82f 	bl	8000a18 <__aeabi_dcmpeq>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	f000 80c0 	beq.w	8006b40 <__kernel_rem_pio2+0x400>
 80069c0:	1e65      	subs	r5, r4, #1
 80069c2:	462b      	mov	r3, r5
 80069c4:	2200      	movs	r2, #0
 80069c6:	9902      	ldr	r1, [sp, #8]
 80069c8:	428b      	cmp	r3, r1
 80069ca:	da6c      	bge.n	8006aa6 <__kernel_rem_pio2+0x366>
 80069cc:	2a00      	cmp	r2, #0
 80069ce:	f000 8089 	beq.w	8006ae4 <__kernel_rem_pio2+0x3a4>
 80069d2:	ab0e      	add	r3, sp, #56	; 0x38
 80069d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80069d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80ad 	beq.w	8006b3c <__kernel_rem_pio2+0x3fc>
 80069e2:	4650      	mov	r0, sl
 80069e4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006a60 <__kernel_rem_pio2+0x320>
 80069e8:	f000 fb42 	bl	8007070 <scalbn>
 80069ec:	ab9a      	add	r3, sp, #616	; 0x268
 80069ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80069f2:	ec57 6b10 	vmov	r6, r7, d0
 80069f6:	00ec      	lsls	r4, r5, #3
 80069f8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80069fc:	46aa      	mov	sl, r5
 80069fe:	f1ba 0f00 	cmp.w	sl, #0
 8006a02:	f280 80d6 	bge.w	8006bb2 <__kernel_rem_pio2+0x472>
 8006a06:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006a58 <__kernel_rem_pio2+0x318>
 8006a0a:	462e      	mov	r6, r5
 8006a0c:	2e00      	cmp	r6, #0
 8006a0e:	f2c0 8104 	blt.w	8006c1a <__kernel_rem_pio2+0x4da>
 8006a12:	ab72      	add	r3, sp, #456	; 0x1c8
 8006a14:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006a18:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006a80 <__kernel_rem_pio2+0x340>
 8006a1c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006a20:	f04f 0800 	mov.w	r8, #0
 8006a24:	1baf      	subs	r7, r5, r6
 8006a26:	e0ea      	b.n	8006bfe <__kernel_rem_pio2+0x4be>
 8006a28:	f04f 0b02 	mov.w	fp, #2
 8006a2c:	e759      	b.n	80068e2 <__kernel_rem_pio2+0x1a2>
 8006a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006a32:	b955      	cbnz	r5, 8006a4a <__kernel_rem_pio2+0x30a>
 8006a34:	b123      	cbz	r3, 8006a40 <__kernel_rem_pio2+0x300>
 8006a36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006a3a:	f8c8 3000 	str.w	r3, [r8]
 8006a3e:	2301      	movs	r3, #1
 8006a40:	3201      	adds	r2, #1
 8006a42:	f108 0804 	add.w	r8, r8, #4
 8006a46:	461d      	mov	r5, r3
 8006a48:	e752      	b.n	80068f0 <__kernel_rem_pio2+0x1b0>
 8006a4a:	1acb      	subs	r3, r1, r3
 8006a4c:	f8c8 3000 	str.w	r3, [r8]
 8006a50:	462b      	mov	r3, r5
 8006a52:	e7f5      	b.n	8006a40 <__kernel_rem_pio2+0x300>
 8006a54:	f3af 8000 	nop.w
	...
 8006a64:	3ff00000 	.word	0x3ff00000
 8006a68:	080073a0 	.word	0x080073a0
 8006a6c:	40200000 	.word	0x40200000
 8006a70:	3ff00000 	.word	0x3ff00000
 8006a74:	3e700000 	.word	0x3e700000
 8006a78:	41700000 	.word	0x41700000
 8006a7c:	3fe00000 	.word	0x3fe00000
 8006a80:	08007360 	.word	0x08007360
 8006a84:	1e62      	subs	r2, r4, #1
 8006a86:	ab0e      	add	r3, sp, #56	; 0x38
 8006a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006a90:	a90e      	add	r1, sp, #56	; 0x38
 8006a92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006a96:	e739      	b.n	800690c <__kernel_rem_pio2+0x1cc>
 8006a98:	1e62      	subs	r2, r4, #1
 8006a9a:	ab0e      	add	r3, sp, #56	; 0x38
 8006a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006aa4:	e7f4      	b.n	8006a90 <__kernel_rem_pio2+0x350>
 8006aa6:	a90e      	add	r1, sp, #56	; 0x38
 8006aa8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	e789      	b.n	80069c6 <__kernel_rem_pio2+0x286>
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	d0fa      	beq.n	8006ab2 <__kernel_rem_pio2+0x372>
 8006abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006abe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006ac2:	446a      	add	r2, sp
 8006ac4:	3a98      	subs	r2, #152	; 0x98
 8006ac6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ac8:	9a08      	ldr	r2, [sp, #32]
 8006aca:	18e3      	adds	r3, r4, r3
 8006acc:	18a5      	adds	r5, r4, r2
 8006ace:	aa22      	add	r2, sp, #136	; 0x88
 8006ad0:	f104 0801 	add.w	r8, r4, #1
 8006ad4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	9b04      	ldr	r3, [sp, #16]
 8006adc:	4543      	cmp	r3, r8
 8006ade:	da04      	bge.n	8006aea <__kernel_rem_pio2+0x3aa>
 8006ae0:	461c      	mov	r4, r3
 8006ae2:	e6a3      	b.n	800682c <__kernel_rem_pio2+0xec>
 8006ae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e7e4      	b.n	8006ab4 <__kernel_rem_pio2+0x374>
 8006aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006af0:	f7f9 fcc0 	bl	8000474 <__aeabi_i2d>
 8006af4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006afa:	46ab      	mov	fp, r5
 8006afc:	461c      	mov	r4, r3
 8006afe:	f04f 0900 	mov.w	r9, #0
 8006b02:	2600      	movs	r6, #0
 8006b04:	2700      	movs	r7, #0
 8006b06:	9b06      	ldr	r3, [sp, #24]
 8006b08:	4599      	cmp	r9, r3
 8006b0a:	dd06      	ble.n	8006b1a <__kernel_rem_pio2+0x3da>
 8006b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006b12:	f108 0801 	add.w	r8, r8, #1
 8006b16:	930a      	str	r3, [sp, #40]	; 0x28
 8006b18:	e7df      	b.n	8006ada <__kernel_rem_pio2+0x39a>
 8006b1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006b1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006b22:	f7f9 fd11 	bl	8000548 <__aeabi_dmul>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	4639      	mov	r1, r7
 8006b2e:	f7f9 fb55 	bl	80001dc <__adddf3>
 8006b32:	f109 0901 	add.w	r9, r9, #1
 8006b36:	4606      	mov	r6, r0
 8006b38:	460f      	mov	r7, r1
 8006b3a:	e7e4      	b.n	8006b06 <__kernel_rem_pio2+0x3c6>
 8006b3c:	3d01      	subs	r5, #1
 8006b3e:	e748      	b.n	80069d2 <__kernel_rem_pio2+0x292>
 8006b40:	ec47 6b10 	vmov	d0, r6, r7
 8006b44:	f1ca 0000 	rsb	r0, sl, #0
 8006b48:	f000 fa92 	bl	8007070 <scalbn>
 8006b4c:	ec57 6b10 	vmov	r6, r7, d0
 8006b50:	4ba0      	ldr	r3, [pc, #640]	; (8006dd4 <__kernel_rem_pio2+0x694>)
 8006b52:	ee10 0a10 	vmov	r0, s0
 8006b56:	2200      	movs	r2, #0
 8006b58:	4639      	mov	r1, r7
 8006b5a:	f7f9 ff7b 	bl	8000a54 <__aeabi_dcmpge>
 8006b5e:	b1f8      	cbz	r0, 8006ba0 <__kernel_rem_pio2+0x460>
 8006b60:	4b9d      	ldr	r3, [pc, #628]	; (8006dd8 <__kernel_rem_pio2+0x698>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	4630      	mov	r0, r6
 8006b66:	4639      	mov	r1, r7
 8006b68:	f7f9 fcee 	bl	8000548 <__aeabi_dmul>
 8006b6c:	f7f9 ff86 	bl	8000a7c <__aeabi_d2iz>
 8006b70:	4680      	mov	r8, r0
 8006b72:	f7f9 fc7f 	bl	8000474 <__aeabi_i2d>
 8006b76:	4b97      	ldr	r3, [pc, #604]	; (8006dd4 <__kernel_rem_pio2+0x694>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f7f9 fce5 	bl	8000548 <__aeabi_dmul>
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4602      	mov	r2, r0
 8006b82:	4639      	mov	r1, r7
 8006b84:	4630      	mov	r0, r6
 8006b86:	f7f9 fb27 	bl	80001d8 <__aeabi_dsub>
 8006b8a:	f7f9 ff77 	bl	8000a7c <__aeabi_d2iz>
 8006b8e:	1c65      	adds	r5, r4, #1
 8006b90:	ab0e      	add	r3, sp, #56	; 0x38
 8006b92:	f10a 0a18 	add.w	sl, sl, #24
 8006b96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006b9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006b9e:	e720      	b.n	80069e2 <__kernel_rem_pio2+0x2a2>
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 ff6a 	bl	8000a7c <__aeabi_d2iz>
 8006ba8:	ab0e      	add	r3, sp, #56	; 0x38
 8006baa:	4625      	mov	r5, r4
 8006bac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006bb0:	e717      	b.n	80069e2 <__kernel_rem_pio2+0x2a2>
 8006bb2:	ab0e      	add	r3, sp, #56	; 0x38
 8006bb4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006bb8:	f7f9 fc5c 	bl	8000474 <__aeabi_i2d>
 8006bbc:	4632      	mov	r2, r6
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	f7f9 fcc2 	bl	8000548 <__aeabi_dmul>
 8006bc4:	4b84      	ldr	r3, [pc, #528]	; (8006dd8 <__kernel_rem_pio2+0x698>)
 8006bc6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006bca:	2200      	movs	r2, #0
 8006bcc:	4630      	mov	r0, r6
 8006bce:	4639      	mov	r1, r7
 8006bd0:	f7f9 fcba 	bl	8000548 <__aeabi_dmul>
 8006bd4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006bd8:	4606      	mov	r6, r0
 8006bda:	460f      	mov	r7, r1
 8006bdc:	e70f      	b.n	80069fe <__kernel_rem_pio2+0x2be>
 8006bde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006be2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006be6:	f7f9 fcaf 	bl	8000548 <__aeabi_dmul>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf2:	f7f9 faf3 	bl	80001dc <__adddf3>
 8006bf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bfa:	f108 0801 	add.w	r8, r8, #1
 8006bfe:	9b02      	ldr	r3, [sp, #8]
 8006c00:	4598      	cmp	r8, r3
 8006c02:	dc01      	bgt.n	8006c08 <__kernel_rem_pio2+0x4c8>
 8006c04:	45b8      	cmp	r8, r7
 8006c06:	ddea      	ble.n	8006bde <__kernel_rem_pio2+0x49e>
 8006c08:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006c0c:	ab4a      	add	r3, sp, #296	; 0x128
 8006c0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006c12:	ed87 7b00 	vstr	d7, [r7]
 8006c16:	3e01      	subs	r6, #1
 8006c18:	e6f8      	b.n	8006a0c <__kernel_rem_pio2+0x2cc>
 8006c1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	dc0b      	bgt.n	8006c38 <__kernel_rem_pio2+0x4f8>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	dc35      	bgt.n	8006c90 <__kernel_rem_pio2+0x550>
 8006c24:	d059      	beq.n	8006cda <__kernel_rem_pio2+0x59a>
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	f003 0007 	and.w	r0, r3, #7
 8006c2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006c30:	ecbd 8b02 	vpop	{d8}
 8006c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d1f3      	bne.n	8006c26 <__kernel_rem_pio2+0x4e6>
 8006c3e:	ab4a      	add	r3, sp, #296	; 0x128
 8006c40:	4423      	add	r3, r4
 8006c42:	9306      	str	r3, [sp, #24]
 8006c44:	461c      	mov	r4, r3
 8006c46:	469a      	mov	sl, r3
 8006c48:	9502      	str	r5, [sp, #8]
 8006c4a:	9b02      	ldr	r3, [sp, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f1aa 0a08 	sub.w	sl, sl, #8
 8006c52:	dc6b      	bgt.n	8006d2c <__kernel_rem_pio2+0x5ec>
 8006c54:	46aa      	mov	sl, r5
 8006c56:	f1ba 0f01 	cmp.w	sl, #1
 8006c5a:	f1a4 0408 	sub.w	r4, r4, #8
 8006c5e:	f300 8085 	bgt.w	8006d6c <__kernel_rem_pio2+0x62c>
 8006c62:	9c06      	ldr	r4, [sp, #24]
 8006c64:	2000      	movs	r0, #0
 8006c66:	3408      	adds	r4, #8
 8006c68:	2100      	movs	r1, #0
 8006c6a:	2d01      	cmp	r5, #1
 8006c6c:	f300 809d 	bgt.w	8006daa <__kernel_rem_pio2+0x66a>
 8006c70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006c74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006c78:	f1bb 0f00 	cmp.w	fp, #0
 8006c7c:	f040 809b 	bne.w	8006db6 <__kernel_rem_pio2+0x676>
 8006c80:	9b01      	ldr	r3, [sp, #4]
 8006c82:	e9c3 5600 	strd	r5, r6, [r3]
 8006c86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006c8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006c8e:	e7ca      	b.n	8006c26 <__kernel_rem_pio2+0x4e6>
 8006c90:	3408      	adds	r4, #8
 8006c92:	ab4a      	add	r3, sp, #296	; 0x128
 8006c94:	441c      	add	r4, r3
 8006c96:	462e      	mov	r6, r5
 8006c98:	2000      	movs	r0, #0
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	2e00      	cmp	r6, #0
 8006c9e:	da36      	bge.n	8006d0e <__kernel_rem_pio2+0x5ce>
 8006ca0:	f1bb 0f00 	cmp.w	fp, #0
 8006ca4:	d039      	beq.n	8006d1a <__kernel_rem_pio2+0x5da>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cac:	9c01      	ldr	r4, [sp, #4]
 8006cae:	e9c4 2300 	strd	r2, r3, [r4]
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006cba:	f7f9 fa8d 	bl	80001d8 <__aeabi_dsub>
 8006cbe:	ae4c      	add	r6, sp, #304	; 0x130
 8006cc0:	2401      	movs	r4, #1
 8006cc2:	42a5      	cmp	r5, r4
 8006cc4:	da2c      	bge.n	8006d20 <__kernel_rem_pio2+0x5e0>
 8006cc6:	f1bb 0f00 	cmp.w	fp, #0
 8006cca:	d002      	beq.n	8006cd2 <__kernel_rem_pio2+0x592>
 8006ccc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	9b01      	ldr	r3, [sp, #4]
 8006cd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006cd8:	e7a5      	b.n	8006c26 <__kernel_rem_pio2+0x4e6>
 8006cda:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006cde:	eb0d 0403 	add.w	r4, sp, r3
 8006ce2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	2100      	movs	r1, #0
 8006cea:	2d00      	cmp	r5, #0
 8006cec:	da09      	bge.n	8006d02 <__kernel_rem_pio2+0x5c2>
 8006cee:	f1bb 0f00 	cmp.w	fp, #0
 8006cf2:	d002      	beq.n	8006cfa <__kernel_rem_pio2+0x5ba>
 8006cf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	9b01      	ldr	r3, [sp, #4]
 8006cfc:	e9c3 0100 	strd	r0, r1, [r3]
 8006d00:	e791      	b.n	8006c26 <__kernel_rem_pio2+0x4e6>
 8006d02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d06:	f7f9 fa69 	bl	80001dc <__adddf3>
 8006d0a:	3d01      	subs	r5, #1
 8006d0c:	e7ed      	b.n	8006cea <__kernel_rem_pio2+0x5aa>
 8006d0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006d12:	f7f9 fa63 	bl	80001dc <__adddf3>
 8006d16:	3e01      	subs	r6, #1
 8006d18:	e7c0      	b.n	8006c9c <__kernel_rem_pio2+0x55c>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	e7c5      	b.n	8006cac <__kernel_rem_pio2+0x56c>
 8006d20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006d24:	f7f9 fa5a 	bl	80001dc <__adddf3>
 8006d28:	3401      	adds	r4, #1
 8006d2a:	e7ca      	b.n	8006cc2 <__kernel_rem_pio2+0x582>
 8006d2c:	e9da 8900 	ldrd	r8, r9, [sl]
 8006d30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006d34:	9b02      	ldr	r3, [sp, #8]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	9302      	str	r3, [sp, #8]
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	4640      	mov	r0, r8
 8006d40:	4649      	mov	r1, r9
 8006d42:	f7f9 fa4b 	bl	80001dc <__adddf3>
 8006d46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	f7f9 fa41 	bl	80001d8 <__aeabi_dsub>
 8006d56:	4632      	mov	r2, r6
 8006d58:	463b      	mov	r3, r7
 8006d5a:	f7f9 fa3f 	bl	80001dc <__adddf3>
 8006d5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006d62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d66:	ed8a 7b00 	vstr	d7, [sl]
 8006d6a:	e76e      	b.n	8006c4a <__kernel_rem_pio2+0x50a>
 8006d6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006d70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006d74:	4640      	mov	r0, r8
 8006d76:	4632      	mov	r2, r6
 8006d78:	463b      	mov	r3, r7
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	f7f9 fa2e 	bl	80001dc <__adddf3>
 8006d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4640      	mov	r0, r8
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	f7f9 fa24 	bl	80001d8 <__aeabi_dsub>
 8006d90:	4632      	mov	r2, r6
 8006d92:	463b      	mov	r3, r7
 8006d94:	f7f9 fa22 	bl	80001dc <__adddf3>
 8006d98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006da0:	ed84 7b00 	vstr	d7, [r4]
 8006da4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006da8:	e755      	b.n	8006c56 <__kernel_rem_pio2+0x516>
 8006daa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006dae:	f7f9 fa15 	bl	80001dc <__adddf3>
 8006db2:	3d01      	subs	r5, #1
 8006db4:	e759      	b.n	8006c6a <__kernel_rem_pio2+0x52a>
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	9a01      	ldr	r2, [sp, #4]
 8006dba:	601d      	str	r5, [r3, #0]
 8006dbc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006dc0:	605c      	str	r4, [r3, #4]
 8006dc2:	609f      	str	r7, [r3, #8]
 8006dc4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006dc8:	60d3      	str	r3, [r2, #12]
 8006dca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dce:	6110      	str	r0, [r2, #16]
 8006dd0:	6153      	str	r3, [r2, #20]
 8006dd2:	e728      	b.n	8006c26 <__kernel_rem_pio2+0x4e6>
 8006dd4:	41700000 	.word	0x41700000
 8006dd8:	3e700000 	.word	0x3e700000
 8006ddc:	00000000 	.word	0x00000000

08006de0 <__kernel_sin>:
 8006de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	ed2d 8b04 	vpush	{d8-d9}
 8006de8:	eeb0 8a41 	vmov.f32	s16, s2
 8006dec:	eef0 8a61 	vmov.f32	s17, s3
 8006df0:	ec55 4b10 	vmov	r4, r5, d0
 8006df4:	b083      	sub	sp, #12
 8006df6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006dfa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006dfe:	9001      	str	r0, [sp, #4]
 8006e00:	da06      	bge.n	8006e10 <__kernel_sin+0x30>
 8006e02:	ee10 0a10 	vmov	r0, s0
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7f9 fe38 	bl	8000a7c <__aeabi_d2iz>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d051      	beq.n	8006eb4 <__kernel_sin+0xd4>
 8006e10:	4622      	mov	r2, r4
 8006e12:	462b      	mov	r3, r5
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 fb96 	bl	8000548 <__aeabi_dmul>
 8006e1c:	4682      	mov	sl, r0
 8006e1e:	468b      	mov	fp, r1
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4620      	mov	r0, r4
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7f9 fb8e 	bl	8000548 <__aeabi_dmul>
 8006e2c:	a341      	add	r3, pc, #260	; (adr r3, 8006f34 <__kernel_sin+0x154>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	4680      	mov	r8, r0
 8006e34:	4689      	mov	r9, r1
 8006e36:	4650      	mov	r0, sl
 8006e38:	4659      	mov	r1, fp
 8006e3a:	f7f9 fb85 	bl	8000548 <__aeabi_dmul>
 8006e3e:	a33f      	add	r3, pc, #252	; (adr r3, 8006f3c <__kernel_sin+0x15c>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f7f9 f9c8 	bl	80001d8 <__aeabi_dsub>
 8006e48:	4652      	mov	r2, sl
 8006e4a:	465b      	mov	r3, fp
 8006e4c:	f7f9 fb7c 	bl	8000548 <__aeabi_dmul>
 8006e50:	a33c      	add	r3, pc, #240	; (adr r3, 8006f44 <__kernel_sin+0x164>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 f9c1 	bl	80001dc <__adddf3>
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	465b      	mov	r3, fp
 8006e5e:	f7f9 fb73 	bl	8000548 <__aeabi_dmul>
 8006e62:	a33a      	add	r3, pc, #232	; (adr r3, 8006f4c <__kernel_sin+0x16c>)
 8006e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e68:	f7f9 f9b6 	bl	80001d8 <__aeabi_dsub>
 8006e6c:	4652      	mov	r2, sl
 8006e6e:	465b      	mov	r3, fp
 8006e70:	f7f9 fb6a 	bl	8000548 <__aeabi_dmul>
 8006e74:	a337      	add	r3, pc, #220	; (adr r3, 8006f54 <__kernel_sin+0x174>)
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f7f9 f9af 	bl	80001dc <__adddf3>
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	4606      	mov	r6, r0
 8006e82:	460f      	mov	r7, r1
 8006e84:	b9eb      	cbnz	r3, 8006ec2 <__kernel_sin+0xe2>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4650      	mov	r0, sl
 8006e8c:	4659      	mov	r1, fp
 8006e8e:	f7f9 fb5b 	bl	8000548 <__aeabi_dmul>
 8006e92:	a325      	add	r3, pc, #148	; (adr r3, 8006f28 <__kernel_sin+0x148>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	f7f9 f99e 	bl	80001d8 <__aeabi_dsub>
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	f7f9 fb52 	bl	8000548 <__aeabi_dmul>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	4629      	mov	r1, r5
 8006eac:	f7f9 f996 	bl	80001dc <__adddf3>
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	ec45 4b10 	vmov	d0, r4, r5
 8006eb8:	b003      	add	sp, #12
 8006eba:	ecbd 8b04 	vpop	{d8-d9}
 8006ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec2:	4b1b      	ldr	r3, [pc, #108]	; (8006f30 <__kernel_sin+0x150>)
 8006ec4:	ec51 0b18 	vmov	r0, r1, d8
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f7f9 fb3d 	bl	8000548 <__aeabi_dmul>
 8006ece:	4632      	mov	r2, r6
 8006ed0:	ec41 0b19 	vmov	d9, r0, r1
 8006ed4:	463b      	mov	r3, r7
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4649      	mov	r1, r9
 8006eda:	f7f9 fb35 	bl	8000548 <__aeabi_dmul>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	ec51 0b19 	vmov	r0, r1, d9
 8006ee6:	f7f9 f977 	bl	80001d8 <__aeabi_dsub>
 8006eea:	4652      	mov	r2, sl
 8006eec:	465b      	mov	r3, fp
 8006eee:	f7f9 fb2b 	bl	8000548 <__aeabi_dmul>
 8006ef2:	ec53 2b18 	vmov	r2, r3, d8
 8006ef6:	f7f9 f96f 	bl	80001d8 <__aeabi_dsub>
 8006efa:	a30b      	add	r3, pc, #44	; (adr r3, 8006f28 <__kernel_sin+0x148>)
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	4606      	mov	r6, r0
 8006f02:	460f      	mov	r7, r1
 8006f04:	4640      	mov	r0, r8
 8006f06:	4649      	mov	r1, r9
 8006f08:	f7f9 fb1e 	bl	8000548 <__aeabi_dmul>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4630      	mov	r0, r6
 8006f12:	4639      	mov	r1, r7
 8006f14:	f7f9 f962 	bl	80001dc <__adddf3>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	4629      	mov	r1, r5
 8006f20:	f7f9 f95a 	bl	80001d8 <__aeabi_dsub>
 8006f24:	e7c4      	b.n	8006eb0 <__kernel_sin+0xd0>
 8006f26:	bf00      	nop
 8006f28:	55555549 	.word	0x55555549
 8006f2c:	3fc55555 	.word	0x3fc55555
 8006f30:	3fe00000 	.word	0x3fe00000
 8006f34:	5acfd57c 	.word	0x5acfd57c
 8006f38:	3de5d93a 	.word	0x3de5d93a
 8006f3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006f40:	3e5ae5e6 	.word	0x3e5ae5e6
 8006f44:	57b1fe7d 	.word	0x57b1fe7d
 8006f48:	3ec71de3 	.word	0x3ec71de3
 8006f4c:	19c161d5 	.word	0x19c161d5
 8006f50:	3f2a01a0 	.word	0x3f2a01a0
 8006f54:	1110f8a6 	.word	0x1110f8a6
 8006f58:	3f811111 	.word	0x3f811111

08006f5c <fabs>:
 8006f5c:	ec51 0b10 	vmov	r0, r1, d0
 8006f60:	ee10 2a10 	vmov	r2, s0
 8006f64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f68:	ec43 2b10 	vmov	d0, r2, r3
 8006f6c:	4770      	bx	lr
	...

08006f70 <floor>:
 8006f70:	ec51 0b10 	vmov	r0, r1, d0
 8006f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006f7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006f80:	2e13      	cmp	r6, #19
 8006f82:	ee10 5a10 	vmov	r5, s0
 8006f86:	ee10 8a10 	vmov	r8, s0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	dc32      	bgt.n	8006ff4 <floor+0x84>
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	da14      	bge.n	8006fbc <floor+0x4c>
 8006f92:	a333      	add	r3, pc, #204	; (adr r3, 8007060 <floor+0xf0>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f7f9 f920 	bl	80001dc <__adddf3>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f7f9 fd62 	bl	8000a68 <__aeabi_dcmpgt>
 8006fa4:	b138      	cbz	r0, 8006fb6 <floor+0x46>
 8006fa6:	2c00      	cmp	r4, #0
 8006fa8:	da57      	bge.n	800705a <floor+0xea>
 8006faa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006fae:	431d      	orrs	r5, r3
 8006fb0:	d001      	beq.n	8006fb6 <floor+0x46>
 8006fb2:	4c2d      	ldr	r4, [pc, #180]	; (8007068 <floor+0xf8>)
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	4628      	mov	r0, r5
 8006fba:	e025      	b.n	8007008 <floor+0x98>
 8006fbc:	4f2b      	ldr	r7, [pc, #172]	; (800706c <floor+0xfc>)
 8006fbe:	4137      	asrs	r7, r6
 8006fc0:	ea01 0307 	and.w	r3, r1, r7
 8006fc4:	4303      	orrs	r3, r0
 8006fc6:	d01f      	beq.n	8007008 <floor+0x98>
 8006fc8:	a325      	add	r3, pc, #148	; (adr r3, 8007060 <floor+0xf0>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 f905 	bl	80001dc <__adddf3>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f7f9 fd47 	bl	8000a68 <__aeabi_dcmpgt>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d0eb      	beq.n	8006fb6 <floor+0x46>
 8006fde:	2c00      	cmp	r4, #0
 8006fe0:	bfbe      	ittt	lt
 8006fe2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006fe6:	fa43 f606 	asrlt.w	r6, r3, r6
 8006fea:	19a4      	addlt	r4, r4, r6
 8006fec:	ea24 0407 	bic.w	r4, r4, r7
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	e7e0      	b.n	8006fb6 <floor+0x46>
 8006ff4:	2e33      	cmp	r6, #51	; 0x33
 8006ff6:	dd0b      	ble.n	8007010 <floor+0xa0>
 8006ff8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006ffc:	d104      	bne.n	8007008 <floor+0x98>
 8006ffe:	ee10 2a10 	vmov	r2, s0
 8007002:	460b      	mov	r3, r1
 8007004:	f7f9 f8ea 	bl	80001dc <__adddf3>
 8007008:	ec41 0b10 	vmov	d0, r0, r1
 800700c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007010:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007018:	fa23 f707 	lsr.w	r7, r3, r7
 800701c:	4207      	tst	r7, r0
 800701e:	d0f3      	beq.n	8007008 <floor+0x98>
 8007020:	a30f      	add	r3, pc, #60	; (adr r3, 8007060 <floor+0xf0>)
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f7f9 f8d9 	bl	80001dc <__adddf3>
 800702a:	2200      	movs	r2, #0
 800702c:	2300      	movs	r3, #0
 800702e:	f7f9 fd1b 	bl	8000a68 <__aeabi_dcmpgt>
 8007032:	2800      	cmp	r0, #0
 8007034:	d0bf      	beq.n	8006fb6 <floor+0x46>
 8007036:	2c00      	cmp	r4, #0
 8007038:	da02      	bge.n	8007040 <floor+0xd0>
 800703a:	2e14      	cmp	r6, #20
 800703c:	d103      	bne.n	8007046 <floor+0xd6>
 800703e:	3401      	adds	r4, #1
 8007040:	ea25 0507 	bic.w	r5, r5, r7
 8007044:	e7b7      	b.n	8006fb6 <floor+0x46>
 8007046:	2301      	movs	r3, #1
 8007048:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800704c:	fa03 f606 	lsl.w	r6, r3, r6
 8007050:	4435      	add	r5, r6
 8007052:	4545      	cmp	r5, r8
 8007054:	bf38      	it	cc
 8007056:	18e4      	addcc	r4, r4, r3
 8007058:	e7f2      	b.n	8007040 <floor+0xd0>
 800705a:	2500      	movs	r5, #0
 800705c:	462c      	mov	r4, r5
 800705e:	e7aa      	b.n	8006fb6 <floor+0x46>
 8007060:	8800759c 	.word	0x8800759c
 8007064:	7e37e43c 	.word	0x7e37e43c
 8007068:	bff00000 	.word	0xbff00000
 800706c:	000fffff 	.word	0x000fffff

08007070 <scalbn>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	ec55 4b10 	vmov	r4, r5, d0
 8007076:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800707a:	4606      	mov	r6, r0
 800707c:	462b      	mov	r3, r5
 800707e:	b99a      	cbnz	r2, 80070a8 <scalbn+0x38>
 8007080:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007084:	4323      	orrs	r3, r4
 8007086:	d036      	beq.n	80070f6 <scalbn+0x86>
 8007088:	4b39      	ldr	r3, [pc, #228]	; (8007170 <scalbn+0x100>)
 800708a:	4629      	mov	r1, r5
 800708c:	ee10 0a10 	vmov	r0, s0
 8007090:	2200      	movs	r2, #0
 8007092:	f7f9 fa59 	bl	8000548 <__aeabi_dmul>
 8007096:	4b37      	ldr	r3, [pc, #220]	; (8007174 <scalbn+0x104>)
 8007098:	429e      	cmp	r6, r3
 800709a:	4604      	mov	r4, r0
 800709c:	460d      	mov	r5, r1
 800709e:	da10      	bge.n	80070c2 <scalbn+0x52>
 80070a0:	a32b      	add	r3, pc, #172	; (adr r3, 8007150 <scalbn+0xe0>)
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	e03a      	b.n	800711e <scalbn+0xae>
 80070a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80070ac:	428a      	cmp	r2, r1
 80070ae:	d10c      	bne.n	80070ca <scalbn+0x5a>
 80070b0:	ee10 2a10 	vmov	r2, s0
 80070b4:	4620      	mov	r0, r4
 80070b6:	4629      	mov	r1, r5
 80070b8:	f7f9 f890 	bl	80001dc <__adddf3>
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	e019      	b.n	80070f6 <scalbn+0x86>
 80070c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80070c6:	460b      	mov	r3, r1
 80070c8:	3a36      	subs	r2, #54	; 0x36
 80070ca:	4432      	add	r2, r6
 80070cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80070d0:	428a      	cmp	r2, r1
 80070d2:	dd08      	ble.n	80070e6 <scalbn+0x76>
 80070d4:	2d00      	cmp	r5, #0
 80070d6:	a120      	add	r1, pc, #128	; (adr r1, 8007158 <scalbn+0xe8>)
 80070d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070dc:	da1c      	bge.n	8007118 <scalbn+0xa8>
 80070de:	a120      	add	r1, pc, #128	; (adr r1, 8007160 <scalbn+0xf0>)
 80070e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070e4:	e018      	b.n	8007118 <scalbn+0xa8>
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	dd08      	ble.n	80070fc <scalbn+0x8c>
 80070ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80070f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80070f6:	ec45 4b10 	vmov	d0, r4, r5
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007100:	da19      	bge.n	8007136 <scalbn+0xc6>
 8007102:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007106:	429e      	cmp	r6, r3
 8007108:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800710c:	dd0a      	ble.n	8007124 <scalbn+0xb4>
 800710e:	a112      	add	r1, pc, #72	; (adr r1, 8007158 <scalbn+0xe8>)
 8007110:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e2      	bne.n	80070de <scalbn+0x6e>
 8007118:	a30f      	add	r3, pc, #60	; (adr r3, 8007158 <scalbn+0xe8>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f7f9 fa13 	bl	8000548 <__aeabi_dmul>
 8007122:	e7cb      	b.n	80070bc <scalbn+0x4c>
 8007124:	a10a      	add	r1, pc, #40	; (adr r1, 8007150 <scalbn+0xe0>)
 8007126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0b8      	beq.n	80070a0 <scalbn+0x30>
 800712e:	a10e      	add	r1, pc, #56	; (adr r1, 8007168 <scalbn+0xf8>)
 8007130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007134:	e7b4      	b.n	80070a0 <scalbn+0x30>
 8007136:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800713a:	3236      	adds	r2, #54	; 0x36
 800713c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007140:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007144:	4620      	mov	r0, r4
 8007146:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <scalbn+0x108>)
 8007148:	2200      	movs	r2, #0
 800714a:	e7e8      	b.n	800711e <scalbn+0xae>
 800714c:	f3af 8000 	nop.w
 8007150:	c2f8f359 	.word	0xc2f8f359
 8007154:	01a56e1f 	.word	0x01a56e1f
 8007158:	8800759c 	.word	0x8800759c
 800715c:	7e37e43c 	.word	0x7e37e43c
 8007160:	8800759c 	.word	0x8800759c
 8007164:	fe37e43c 	.word	0xfe37e43c
 8007168:	c2f8f359 	.word	0xc2f8f359
 800716c:	81a56e1f 	.word	0x81a56e1f
 8007170:	43500000 	.word	0x43500000
 8007174:	ffff3cb0 	.word	0xffff3cb0
 8007178:	3c900000 	.word	0x3c900000

0800717c <_init>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	bf00      	nop
 8007180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007182:	bc08      	pop	{r3}
 8007184:	469e      	mov	lr, r3
 8007186:	4770      	bx	lr

08007188 <_fini>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	bf00      	nop
 800718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718e:	bc08      	pop	{r3}
 8007190:	469e      	mov	lr, r3
 8007192:	4770      	bx	lr
